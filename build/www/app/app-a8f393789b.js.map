{"version":3,"sources":["app/app.module.js","app/services/user/user.service.js","app/services/profiles/profile.service.js","app/services/profiles/page-ribbon.directive.js","app/services/auth/sessions.service.js","app/services/auth/register.service.js","app/services/auth/principal.service.js","app/services/auth/password-reset-init.service.js","app/services/auth/password-reset-finish.service.js","app/services/auth/password.service.js","app/services/auth/has-authority.directive.js","app/services/auth/has-any-authority.directive.js","app/services/auth/auth.session.service.js","app/services/auth/auth.service.js","app/services/auth/activate.service.js","app/services/auth/account.service.js","app/layouts/navbar/navbar.controller.js","app/layouts/navbar/active-link.directive.js","app/layouts/error/error.state.js","app/home/home.state.js","app/home/home.controller.js","app/entities/threshold/threshold-dialog.controller.js","app/entities/threshold/threshold-detail.controller.js","app/entities/threshold/threshold-delete-dialog.controller.js","app/entities/threshold/threshold.state.js","app/entities/threshold/threshold.service.js","app/entities/threshold/threshold.search.service.js","app/entities/threshold/threshold.controller.js","app/entities/pad-set/pad-set-dialog.controller.js","app/entities/pad-set/pad-set-detail.controller.js","app/entities/pad-set/pad-set-delete-dialog.controller.js","app/entities/pad-set/pad-set.state.js","app/entities/pad-set/pad-set.service.js","app/entities/pad-set/pad-set.search.service.js","app/entities/pad-set/pad-set.controller.js","app/entities/metric/metric-dialog.controller.js","app/entities/metric/metric-detail.controller.js","app/entities/metric/metric-delete-dialog.controller.js","app/entities/metric/metric.state.js","app/entities/metric/metric.service.js","app/entities/metric/metric.search.service.js","app/entities/metric/metric.controller.js","app/entities/equipment-set/equipment-set-dialog.controller.js","app/entities/equipment-set/equipment-set-detail.controller.js","app/entities/equipment-set/equipment-set-delete-dialog.controller.js","app/entities/equipment-set/equipment-set.state.js","app/entities/equipment-set/equipment-set.service.js","app/entities/equipment-set/equipment-set.search.service.js","app/entities/equipment-set/equipment-set.controller.js","app/entities/entity.state.js","app/components/util/truncate-words.filter.js","app/components/util/truncate-characters.filter.js","app/components/util/sort-by.directive.js","app/components/util/sort.directive.js","app/components/util/parse-links.service.js","app/components/util/pagination-util.service.js","app/components/util/jhi-item-count.directive.js","app/components/util/date-util.service.js","app/components/util/data-util.service.js","app/components/util/capitalize.filter.js","app/components/util/base64.service.js","app/components/login/login.service.js","app/components/login/login.controller.js","app/components/form/show-validation.directive.js","app/components/form/pagination.constants.js","app/components/form/minbytes.directive.js","app/components/form/maxbytes.directive.js","app/components/alert/alert-error.directive.js","app/components/alert/alert.service.js","app/components/alert/alert.directive.js","app/blocks/interceptor/notification.interceptor.js","app/blocks/interceptor/errorhandler.interceptor.js","app/blocks/interceptor/auth-expired.interceptor.js","app/blocks/handlers/state.handler.js","app/blocks/config/uib-pagination.config.js","app/blocks/config/uib-pager.config.js","app/blocks/config/localstorage.config.js","app/blocks/config/http.config.js","app/blocks/config/compile.config.js","app/blocks/config/alert.config.js","app/app.state.js","app/app.constants.js","app/admin/user-management/user-management-dialog.controller.js","app/admin/user-management/user-management-detail.controller.js","app/admin/user-management/user-management-delete-dialog.controller.js","app/admin/user-management/user-management.state.js","app/admin/user-management/user-management.controller.js","app/admin/metrics/metrics.state.js","app/admin/metrics/metrics.service.js","app/admin/metrics/metrics.modal.controller.js","app/admin/metrics/metrics.controller.js","app/admin/logs/logs.state.js","app/admin/logs/logs.service.js","app/admin/logs/logs.controller.js","app/admin/health/health.state.js","app/admin/health/health.service.js","app/admin/health/health.modal.controller.js","app/admin/health/health.controller.js","app/admin/docs/docs.state.js","app/admin/configuration/configuration.state.js","app/admin/configuration/configuration.service.js","app/admin/configuration/configuration.controller.js","app/admin/audits/audits.state.js","app/admin/audits/audits.service.js","app/admin/audits/audits.controller.js","app/admin/admin.state.js","app/account/settings/settings.state.js","app/account/settings/settings.controller.js","app/account/sessions/sessions.state.js","app/account/sessions/sessions.controller.js","app/account/reset/request/reset.request.state.js","app/account/reset/request/reset.request.controller.js","app/account/reset/finish/reset.finish.state.js","app/account/reset/finish/reset.finish.controller.js","app/account/register/register.state.js","app/account/register/register.controller.js","app/account/password/password-strength-bar.directive.js","app/account/password/password.state.js","app/account/password/password.controller.js","app/account/activate/activate.state.js","app/account/activate/activate.controller.js","app/account/account.state.js","app/app.js"],"names":["run","stateHandler","initialize","angular","module","$inject","User","$resource","service","query","method","isArray","get","transformResponse","data","fromJson","save","update","delete","factory","ProfileService","$http","getProfileInfo","isUndefined","dataPromise","then","result","activeProfiles","response","ribbonEnv","inProduction","indexOf","swaggerEnabled","pageRibbon","$rootScope","linkFunc","scope","element","attrs","addClass","removeClass","directive","replace","restrict","template","link","Sessions","getAll","Register","Principal","$q","Account","authenticate","identity","_identity","_authenticated","hasAnyAuthority","authorities","i","length","hasAuthority","authority","this","_id","when","force","getAccountThen","account","deferred","resolve","getAccountCatch","defer","undefined","isDefined","promise","$promise","catch","isAuthenticated","isIdentityResolved","PasswordResetInit","PasswordResetFinish","Password","setVisible","setHidden","defineVisibility","reset","$watch","split","AuthServerProvider","$localStorage","getToken","token","authenticationToken","hasValidToken","login","credentials","encodeURIComponent","username","password","rememberMe","post","headers","Content-Type","success","logout","Auth","$state","$sessionStorage","LoginService","Activate","activateAccount","key","callback","cb","noop","err","bind","authorize","authThen","toState","parent","name","go","fromState","getPreviousState","previousState","resetPreviousState","params","storePreviousState","toStateParams","open","authReturn","changePassword","newPassword","createAccount","loginThen","reject","resetPasswordFinish","keyAndPassword","resetPasswordInit","mail","updateAccount","previousStateName","previousStateParams","interceptor","NavbarController","collapseNavbar","toggleNavbar","vm","isNavbarCollapsed","controller","activeLink","clazz","path","href","substring","location","newPath","stateConfig","$stateProvider","state","url","pageTitle","views","content@","templateUrl","config","controllerAs","HomeController","$scope","getAccount","register","$on","ThresholdDialogController","$timeout","$stateParams","$uibModalInstance","entity","Threshold","clear","dismiss","isSaving","threshold","id","onSaveSuccess","onSaveError","$emit","close","focus","ThresholdDetailController","unsubscribe","event","ThresholdDeleteController","confirmDelete","currentStateData","current","onEnter","$uibModal","backdrop","size","reload","value","resourceUrl","ThresholdSearch","ThresholdController","loadAll","thresholds","search","searchQuery","PadSetDialogController","PadSet","EquipmentSet","padSet","equipmentsets","PadSetDetailController","PadSetDeleteController","latitude","longitude","PadSetSearch","PadSetController","padSets","MetricDialogController","Metric","metric","filter","all","push","MetricDetailController","MetricDeleteController","MetricSearch","MetricController","metrics","EquipmentSetDialogController","equipmentSet","padsets","EquipmentSetDetailController","EquipmentSetDeleteController","EquipmentSetSearch","EquipmentSetController","equipmentSets","abstract","words","wordsFilter","input","isNaN","inputWords","slice","join","characters","charactersFilter","chars","breakOnWord","charAt","substr","lastspace","lastIndexOf","jhSortBy","parentCtrl","sort","require","jhSort","predicate","ascending","SortController","bindToController","$element","applyClass","thisIcon","find","sortIcon","sortAsc","sortDesc","remove","add","resetClasses","allThIcons","field","$apply","triggerApply","values","$watchGroup","ParseLinks","parse","header","Error","parts","links","forEach","p","section","trim","queryString","RegExp","$0","$1","$2","$3","page","isString","parseInt","PaginationUtil","parseAscending","sortArray","parsePage","parsePredicate","pop","jhiItemCount","bindings","queryCount","itemsPerPage","component","DateUtils","$filter","convertDateTimeFromServer","date","Date","convertLocalDateFromServer","dateString","convertLocalDateToServer","dateformat","DataUtils","$window","abbreviate","text","byteSize","base64String","endsWith","suffix","str","paddingSize","formatAsBytes","toString","openFile","type","toBase64","file","fileReader","FileReader","readAsDataURL","onload","e","base64Data","target","capitalize","capitalizeFilter","toLowerCase","toUpperCase","Base64","encode","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","charCodeAt","keyStr","decode","String","fromCharCode","modalInstance","animation","resetModal","LoginController","cancel","authenticationError","preventDefault","$broadcast","requestResetPassword","showValidation","formCtrl","each","$formGroup","$inputs","$input","inputName","attr","$invalid","$dirty","isInvalid","toggleClass","constant","minbytes","ngModel","$validators","modelValue","$isEmpty","numberOfBytes","maxbytes","jhiAlertErrorController","AlertService","addErrorAlert","message","alerts","msg","timeout","toast","isToast","scoped","cleanHttpErrorListener","httpResponse","stopPropagation","status","errorHeader","entityKey","entityName","fieldErrors","fieldError","convertedField","fieldName","toJson","jhiAlertError","getService","$sce","position","error","warning","info","alertOptions","alert","trustAsHtml","alertId","closeAlert","addAlert","extAlerts","that","thisAlerts","closeAlertByIndex","map","index","splice","$get","showAsToast","provider","jhiAlertController","jhiAlert","notificationInterceptor","alertKey","param","errorHandlerInterceptor","responseError","authExpiredInterceptor","$injector","$document","to","getCSRF","finally","afterCSRFRenewed","doc","ca","cookie","c","oldResponse","VERSION","stateChangeStart","external","stateChangeSuccess","toParams","fromParams","titleKey","document","title","paginationConfig","uibPaginationConfig","paginationConstants","maxSize","boundaryLinks","firstText","previousText","nextText","lastText","pagerConfig","uibPagerConfig","localStorageConfig","$localStorageProvider","$sessionStorageProvider","setKeyPrefix","httpConfig","$urlRouterProvider","$httpProvider","httpRequestInterceptorCacheBusterProvider","$urlMatcherFactoryProvider","defaults","xsrfCookieName","xsrfHeaderName","setMatchlist","otherwise","interceptors","val","equals","a","b","is","pattern","compileServiceConfig","$compileProvider","DEBUG_INFO_ENABLED","debugInfoEnabled","alertServiceConfig","AlertServiceProvider","navbar@","UserManagementDialogController","user","langKey","languages","UserManagementDetailController","load","UserManagementDeleteController","squash","pagingParams","firstName","lastName","email","activated","createdBy","createdDate","lastModifiedBy","lastModifiedDate","resetDate","resetKey","UserManagementController","setActive","isActivated","onSuccess","onError","totalItems","users","reverse","loadPage","transition","transitionTo","$current","currentSearch","currentAccount","JhiMetricsService","getMetrics","threadDump","JhiMetricsMonitoringModalController","getLabelClass","threadState","threadDumpAll","threadDumpBlocked","threadDumpRunnable","threadDumpTimedWaiting","threadDumpWaiting","JhiMetricsMonitoringController","refresh","updatingMetrics","refreshThreadDumpData","cachesStats","servicesStats","newValue","timers","newKey","LogsService","findAll","changeLevel","LogsController","level","loggers","JhiHealthService","checkHealth","transformHealthData","flattenHealthData","getBaseName","getSubSystemName","remainder","isHealthObject","hasSubSystem","addHealthObject","getModuleName","isLeaf","healthObject","healthData","details","hasDetails","extend","separator","HealthModalController","currentHealth","baseName","subSystemName","JhiHealthCheckController","statusState","updatingHealth","showHealth","health","JhiConfigurationService","getConfigPropsComplete","properties","orderBy","getEnv","getEnvComplete","vals","v","k","JhiConfigurationController","allConfiguration","configuration","AuditsService","fromDate","toDate","AuditsController","onChangeDate","dateFormat","audits","today","getFullYear","getMonth","getDate","previousMonth","SettingsController","settingsAccount","copyAccount","SessionsController","invalidate","series","sessions","RequestResetController","requestReset","errorEmailNotExists","resetAccount","ResetFinishController","finishReset","doNotMatch","confirmPassword","keyMissing","RegisterController","registerAccount","errorUserExists","errorEmailExists","passwordStrengthBar","iElement","strength","colors","mesureStrength","_force","_regex","_lowerLetters","test","_upperLetters","_numbers","_symbols","_flags","_passedMatches","$","grep","el","Math","min","getColor","s","idx","col","children","css","background-color","passwordToCheck","PasswordController","ActivationController","$templateCache","put"],"mappings":"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","file":"app/app-a8f393789b.js","sourcesContent":["(function() {\n    'use strict';\n\n    angular\n        .module('team7App', [\n            'ngStorage', \n            'ngResource',\n            'ngCookies',\n            'ngAria',\n            'ngCacheBuster',\n            'ngFileUpload',\n            'ui.bootstrap',\n            'ui.bootstrap.datetimepicker',\n            'ui.router',\n            'infinite-scroll',\n            // jhipster-needle-angularjs-add-module JHipster will add new module here\n            'angular-loading-bar'\n        ])\n        .run(run);\n\n    run.$inject = ['stateHandler'];\n\n    function run(stateHandler) {\n        stateHandler.initialize();\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('User', User);\n\n    User.$inject = ['$resource'];\n\n    function User ($resource) {\n        var service = $resource('api/users/:login', {}, {\n            'query': {method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'save': { method:'POST' },\n            'update': { method:'PUT' },\n            'delete':{ method:'DELETE'}\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('ProfileService', ProfileService);\n\n    ProfileService.$inject = ['$http'];\n\n    function ProfileService($http) {\n\n        var dataPromise;\n\n        var service = {\n            getProfileInfo : getProfileInfo\n        };\n\n        return service;\n\n        function getProfileInfo() {\n            if (angular.isUndefined(dataPromise)) {\n                dataPromise = $http.get('api/profile-info').then(function(result) {\n                    if (result.data.activeProfiles) {\n                        var response = {};\n                        response.activeProfiles = result.data.activeProfiles;\n                        response.ribbonEnv = result.data.ribbonEnv;\n                        response.inProduction = result.data.activeProfiles.indexOf(\"prod\") !== -1;\n                        response.swaggerEnabled = result.data.activeProfiles.indexOf(\"swagger\") !== -1;\n                        return response;\n                    }\n                });\n            }\n            return dataPromise;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .directive('pageRibbon', pageRibbon);\n\n    pageRibbon.$inject = ['ProfileService', '$rootScope'];\n\n    function pageRibbon(ProfileService, $rootScope) {\n        var directive = {\n            replace : true,\n            restrict : 'AE',\n            template : '<div class=\"ribbon hidden\"><a href=\"\" >{{ribbonEnv}}</a></div>',\n            link : linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            ProfileService.getProfileInfo().then(function(response) {\n                if (response.ribbonEnv) {\n                    scope.ribbonEnv = response.ribbonEnv;\n                    element.addClass(response.ribbonEnv);\n                    element.removeClass('hidden');\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('Sessions', Sessions);\n\n    Sessions.$inject = ['$resource'];\n\n    function Sessions ($resource) {\n        return $resource('api/account/sessions/:series', {}, {\n            'getAll': { method: 'GET', isArray: true}\n        });\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('Register', Register);\n\n    Register.$inject = ['$resource'];\n\n    function Register ($resource) {\n        return $resource('api/register', {}, {});\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('Principal', Principal);\n\n    Principal.$inject = ['$q', 'Account'];\n\n    function Principal ($q, Account) {\n        var _identity,\n            _authenticated = false;\n\n        var service = {\n            authenticate: authenticate,\n            hasAnyAuthority: hasAnyAuthority,\n            hasAuthority: hasAuthority,\n            identity: identity,\n            isAuthenticated: isAuthenticated,\n            isIdentityResolved: isIdentityResolved\n        };\n\n        return service;\n\n        function authenticate (identity) {\n            _identity = identity;\n            _authenticated = identity !== null;\n        }\n\n        function hasAnyAuthority (authorities) {\n            if (!_authenticated || !_identity || !_identity.authorities) {\n                return false;\n            }\n\n            for (var i = 0; i < authorities.length; i++) {\n                if (_identity.authorities.indexOf(authorities[i]) !== -1) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        function hasAuthority (authority) {\n            if (!_authenticated) {\n                return $q.when(false);\n            }\n\n            return this.identity().then(function(_id) {\n                return _id.authorities && _id.authorities.indexOf(authority) !== -1;\n            }, function(){\n                return false;\n            });\n        }\n\n        function identity (force) {\n            var deferred = $q.defer();\n\n            if (force === true) {\n                _identity = undefined;\n            }\n\n            // check and see if we have retrieved the identity data from the server.\n            // if we have, reuse it by immediately resolving\n            if (angular.isDefined(_identity)) {\n                deferred.resolve(_identity);\n\n                return deferred.promise;\n            }\n\n            // retrieve the identity data from the server, update the identity object, and then resolve.\n            Account.get().$promise\n                .then(getAccountThen)\n                .catch(getAccountCatch);\n\n            return deferred.promise;\n\n            function getAccountThen (account) {\n                _identity = account.data;\n                _authenticated = true;\n                deferred.resolve(_identity);\n            }\n\n            function getAccountCatch () {\n                _identity = null;\n                _authenticated = false;\n                deferred.resolve(_identity);\n            }\n        }\n\n        function isAuthenticated () {\n            return _authenticated;\n        }\n\n        function isIdentityResolved () {\n            return angular.isDefined(_identity);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('PasswordResetInit', PasswordResetInit);\n\n    PasswordResetInit.$inject = ['$resource'];\n\n    function PasswordResetInit($resource) {\n        var service = $resource('api/account/reset_password/init', {}, {});\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('PasswordResetFinish', PasswordResetFinish);\n\n    PasswordResetFinish.$inject = ['$resource'];\n\n    function PasswordResetFinish($resource) {\n        var service = $resource('api/account/reset_password/finish', {}, {});\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('Password', Password);\n\n    Password.$inject = ['$resource'];\n\n    function Password($resource) {\n        var service = $resource('api/account/change_password', {}, {});\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .directive('hasAuthority', hasAuthority);\n\n    hasAuthority.$inject = ['Principal'];\n\n    function hasAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authority = attrs.hasAuthority.replace(/\\s+/g, '');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    Principal.hasAuthority(authority)\n                        .then(function (result) {\n                            if (result) {\n                                setVisible();\n                            } else {\n                                setHidden();\n                            }\n                        });\n                };\n\n            if (authority.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .directive('hasAnyAuthority', hasAnyAuthority);\n\n    hasAnyAuthority.$inject = ['Principal'];\n\n    function hasAnyAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n                    var result;\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    result = Principal.hasAnyAuthority(authorities);\n                    if (result) {\n                        setVisible();\n                    } else {\n                        setHidden();\n                    }\n                };\n\n            if (authorities.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('AuthServerProvider', AuthServerProvider);\n\n    AuthServerProvider.$inject = ['$http', '$localStorage' ];\n\n    function AuthServerProvider ($http, $localStorage ) {\n        var service = {\n            getToken: getToken,\n            hasValidToken: hasValidToken,\n            login: login,\n            logout: logout\n        };\n\n        return service;\n\n        function getToken () {\n            var token = $localStorage.authenticationToken;\n            return token;\n        }\n\n        function hasValidToken () {\n            var token = this.getToken();\n            return !!token;\n        }\n\n        function login (credentials) {\n            var data = 'j_username=' + encodeURIComponent(credentials.username) +\n                '&j_password=' + encodeURIComponent(credentials.password) +\n                '&remember-me=' + credentials.rememberMe + '&submit=Login';\n\n            return $http.post('api/authentication', data, {\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }).success(function (response) {\n                return response;\n            });\n        }\n\n        function logout () {\n\n            \n            // logout from the server\n            $http.post('api/logout').success(function (response) {\n                delete $localStorage.authenticationToken;\n                // to get a new csrf token call the api\n                $http.get('api/account');\n                return response;\n            });\n            \n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('Auth', Auth);\n\n    Auth.$inject = ['$rootScope', '$state', '$sessionStorage', '$q', 'Principal', 'AuthServerProvider', 'Account', 'LoginService', 'Register', 'Activate', 'Password', 'PasswordResetInit', 'PasswordResetFinish'];\n\n    function Auth ($rootScope, $state, $sessionStorage, $q, Principal, AuthServerProvider, Account, LoginService, Register, Activate, Password, PasswordResetInit, PasswordResetFinish) {\n        var service = {\n            activateAccount: activateAccount,\n            authorize: authorize,\n            changePassword: changePassword,\n            createAccount: createAccount,\n            getPreviousState: getPreviousState,\n            login: login,\n            logout: logout,\n            resetPasswordFinish: resetPasswordFinish,\n            resetPasswordInit: resetPasswordInit,\n            resetPreviousState: resetPreviousState,\n            storePreviousState: storePreviousState,\n            updateAccount: updateAccount\n        };\n\n        return service;\n\n        function activateAccount (key, callback) {\n            var cb = callback || angular.noop;\n\n            return Activate.get(key,\n                function (response) {\n                    return cb(response);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function authorize (force) {\n            var authReturn = Principal.identity(force).then(authThen);\n\n            return authReturn;\n\n            function authThen () {\n                var isAuthenticated = Principal.isAuthenticated();\n\n                // an authenticated user can't access to login and register pages\n                if (isAuthenticated && $rootScope.toState.parent === 'account' && ($rootScope.toState.name === 'login' || $rootScope.toState.name === 'register')) {\n                    $state.go('home');\n                }\n\n                // recover and clear previousState after external login redirect (e.g. oauth2)\n                if (isAuthenticated && !$rootScope.fromState.name && getPreviousState()) {\n                    var previousState = getPreviousState();\n                    resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n\n                if ($rootScope.toState.data.authorities && $rootScope.toState.data.authorities.length > 0 && !Principal.hasAnyAuthority($rootScope.toState.data.authorities)) {\n                    if (isAuthenticated) {\n                        // user is signed in but not authorized for desired state\n                        $state.go('accessdenied');\n                    }\n                    else {\n                        // user is not authenticated. stow the state they wanted before you\n                        // send them to the login service, so you can return them when you're done\n                        storePreviousState($rootScope.toState.name, $rootScope.toStateParams);\n\n                        // now, send them to the signin state so they can log in\n                        $state.go('accessdenied').then(function() {\n                            LoginService.open();\n                        });\n                    }\n                }\n            }\n        }\n\n        function changePassword (newPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return Password.save(newPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function createAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Register.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    this.logout();\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function login (credentials, callback) {\n            var cb = callback || angular.noop;\n            var deferred = $q.defer();\n\n            AuthServerProvider.login(credentials)\n                .then(loginThen)\n                .catch(function (err) {\n                    this.logout();\n                    deferred.reject(err);\n                    return cb(err);\n                }.bind(this));\n\n            function loginThen (data) {\n                Principal.identity(true).then(function(account) {\n                    deferred.resolve(data);\n                });\n                return cb();\n            }\n\n            return deferred.promise;\n        }\n\n\n        function logout () {\n            AuthServerProvider.logout();\n            Principal.authenticate(null);\n        }\n\n        function resetPasswordFinish (keyAndPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetFinish.save(keyAndPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function resetPasswordInit (mail, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetInit.save(mail, function() {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function updateAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Account.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function getPreviousState() {\n            var previousState = $sessionStorage.previousState;\n            return previousState;\n        }\n\n        function resetPreviousState() {\n            delete $sessionStorage.previousState;\n        }\n\n        function storePreviousState(previousStateName, previousStateParams) {\n            var previousState = { \"name\": previousStateName, \"params\": previousStateParams };\n            $sessionStorage.previousState = previousState;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('Activate', Activate);\n\n    Activate.$inject = ['$resource'];\n\n    function Activate ($resource) {\n        var service = $resource('api/activate', {}, {\n            'get': { method: 'GET', params: {}, isArray: false}\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('Account', Account);\n\n    Account.$inject = ['$resource'];\n\n    function Account ($resource) {\n        var service = $resource('api/account', {}, {\n            'get': { method: 'GET', params: {}, isArray: false,\n                interceptor: {\n                    response: function(response) {\n                        // expose response\n                        return response;\n                    }\n                }\n            }\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('NavbarController', NavbarController);\n\n    NavbarController.$inject = ['$state', 'Auth', 'Principal', 'ProfileService', 'LoginService'];\n\n    function NavbarController ($state, Auth, Principal, ProfileService, LoginService) {\n        var vm = this;\n\n        vm.isNavbarCollapsed = true;\n        vm.isAuthenticated = Principal.isAuthenticated;\n\n        ProfileService.getProfileInfo().then(function(response) {\n            vm.inProduction = response.inProduction;\n            vm.swaggerEnabled = response.swaggerEnabled;\n        });\n\n        vm.login = login;\n        vm.logout = logout;\n        vm.toggleNavbar = toggleNavbar;\n        vm.collapseNavbar = collapseNavbar;\n        vm.$state = $state;\n\n        function login() {\n            collapseNavbar();\n            LoginService.open();\n        }\n\n        function logout() {\n            collapseNavbar();\n            Auth.logout();\n            $state.go('home');\n        }\n\n        function toggleNavbar() {\n            vm.isNavbarCollapsed = !vm.isNavbarCollapsed;\n        }\n\n        function collapseNavbar() {\n            vm.isNavbarCollapsed = true;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .directive('activeLink', activeLink);\n\n    function activeLink() {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var clazz = attrs.activeLink;\n            var path = attrs.href;\n            path = path.substring(1); //hack because path does bot return including hashbang\n            scope.location = location;\n            scope.$watch('location.path()', function(newPath) {\n                if (path === newPath) {\n                    element.addClass(clazz);\n                } else {\n                    element.removeClass(clazz);\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n            .state('error', {\n                parent: 'app',\n                url: '/error',\n                data: {\n                    authorities: [],\n                    pageTitle: 'Error page!'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/error.html'\n                    }\n                }\n            })\n            .state('accessdenied', {\n                parent: 'app',\n                url: '/accessdenied',\n                data: {\n                    authorities: []\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/accessdenied.html'\n                    }\n                }\n            });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('home', {\n            parent: 'app',\n            url: '/',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/home/home.html',\n                    controller: 'HomeController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('HomeController', HomeController);\n\n    HomeController.$inject = ['$scope', 'Principal', 'LoginService', '$state'];\n\n    function HomeController ($scope, Principal, LoginService, $state) {\n        var vm = this;\n\n        vm.account = null;\n        vm.isAuthenticated = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        $scope.$on('authenticationSuccess', function() {\n            getAccount();\n        });\n\n        getAccount();\n\n        function getAccount() {\n            Principal.identity().then(function(account) {\n                vm.account = account;\n                vm.isAuthenticated = Principal.isAuthenticated;\n            });\n        }\n        function register () {\n            $state.go('register');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('ThresholdDialogController', ThresholdDialogController);\n\n    ThresholdDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Threshold'];\n\n    function ThresholdDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Threshold) {\n        var vm = this;\n\n        vm.threshold = entity;\n        vm.clear = clear;\n        vm.save = save;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.threshold.id !== null) {\n                Threshold.update(vm.threshold, onSaveSuccess, onSaveError);\n            } else {\n                Threshold.save(vm.threshold, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('team7App:thresholdUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('ThresholdDetailController', ThresholdDetailController);\n\n    ThresholdDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Threshold'];\n\n    function ThresholdDetailController($scope, $rootScope, $stateParams, previousState, entity, Threshold) {\n        var vm = this;\n\n        vm.threshold = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('team7App:thresholdUpdate', function(event, result) {\n            vm.threshold = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('ThresholdDeleteController',ThresholdDeleteController);\n\n    ThresholdDeleteController.$inject = ['$uibModalInstance', 'entity', 'Threshold'];\n\n    function ThresholdDeleteController($uibModalInstance, entity, Threshold) {\n        var vm = this;\n\n        vm.threshold = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n        \n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Threshold.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('threshold', {\n            parent: 'entity',\n            url: '/threshold',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Thresholds'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/threshold/thresholds.html',\n                    controller: 'ThresholdController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('threshold-detail', {\n            parent: 'entity',\n            url: '/threshold/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Threshold'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/threshold/threshold-detail.html',\n                    controller: 'ThresholdDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Threshold', function($stateParams, Threshold) {\n                    return Threshold.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'threshold',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('threshold-detail.edit', {\n            parent: 'threshold-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/threshold/threshold-dialog.html',\n                    controller: 'ThresholdDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Threshold', function(Threshold) {\n                            return Threshold.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('threshold.new', {\n            parent: 'threshold',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/threshold/threshold-dialog.html',\n                    controller: 'ThresholdDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                value: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('threshold', null, { reload: 'threshold' });\n                }, function() {\n                    $state.go('threshold');\n                });\n            }]\n        })\n        .state('threshold.edit', {\n            parent: 'threshold',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/threshold/threshold-dialog.html',\n                    controller: 'ThresholdDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Threshold', function(Threshold) {\n                            return Threshold.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('threshold', null, { reload: 'threshold' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('threshold.delete', {\n            parent: 'threshold',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/threshold/threshold-delete-dialog.html',\n                    controller: 'ThresholdDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Threshold', function(Threshold) {\n                            return Threshold.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('threshold', null, { reload: 'threshold' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('team7App')\n        .factory('Threshold', Threshold);\n\n    Threshold.$inject = ['$resource'];\n\n    function Threshold ($resource) {\n        var resourceUrl =  'api/thresholds/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('ThresholdSearch', ThresholdSearch);\n\n    ThresholdSearch.$inject = ['$resource'];\n\n    function ThresholdSearch($resource) {\n        var resourceUrl =  'api/_search/thresholds/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('ThresholdController', ThresholdController);\n\n    ThresholdController.$inject = ['$scope', '$state', 'Threshold', 'ThresholdSearch'];\n\n    function ThresholdController ($scope, $state, Threshold, ThresholdSearch) {\n        var vm = this;\n        \n        vm.thresholds = [];\n        vm.search = search;\n        vm.loadAll = loadAll;\n\n        loadAll();\n\n        function loadAll() {\n            Threshold.query(function(result) {\n                vm.thresholds = result;\n            });\n        }\n\n        function search () {\n            if (!vm.searchQuery) {\n                return vm.loadAll();\n            }\n            ThresholdSearch.query({query: vm.searchQuery}, function(result) {\n                vm.thresholds = result;\n            });\n        }    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('PadSetDialogController', PadSetDialogController);\n\n    PadSetDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'PadSet', 'EquipmentSet'];\n\n    function PadSetDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, PadSet, EquipmentSet) {\n        var vm = this;\n\n        vm.padSet = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.equipmentsets = EquipmentSet.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.padSet.id !== null) {\n                PadSet.update(vm.padSet, onSaveSuccess, onSaveError);\n            } else {\n                PadSet.save(vm.padSet, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('team7App:padSetUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('PadSetDetailController', PadSetDetailController);\n\n    PadSetDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'PadSet', 'EquipmentSet'];\n\n    function PadSetDetailController($scope, $rootScope, $stateParams, previousState, entity, PadSet, EquipmentSet) {\n        var vm = this;\n\n        vm.padSet = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('team7App:padSetUpdate', function(event, result) {\n            vm.padSet = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('PadSetDeleteController',PadSetDeleteController);\n\n    PadSetDeleteController.$inject = ['$uibModalInstance', 'entity', 'PadSet'];\n\n    function PadSetDeleteController($uibModalInstance, entity, PadSet) {\n        var vm = this;\n\n        vm.padSet = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n        \n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            PadSet.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('pad-set', {\n            parent: 'entity',\n            url: '/pad-set',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'PadSets'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/pad-set/pad-sets.html',\n                    controller: 'PadSetController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('pad-set-detail', {\n            parent: 'entity',\n            url: '/pad-set/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'PadSet'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/pad-set/pad-set-detail.html',\n                    controller: 'PadSetDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'PadSet', function($stateParams, PadSet) {\n                    return PadSet.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'pad-set',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('pad-set-detail.edit', {\n            parent: 'pad-set-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/pad-set/pad-set-dialog.html',\n                    controller: 'PadSetDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['PadSet', function(PadSet) {\n                            return PadSet.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('pad-set.new', {\n            parent: 'pad-set',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/pad-set/pad-set-dialog.html',\n                    controller: 'PadSetDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                name: null,\n                                latitude: null,\n                                longitude: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('pad-set', null, { reload: 'pad-set' });\n                }, function() {\n                    $state.go('pad-set');\n                });\n            }]\n        })\n        .state('pad-set.edit', {\n            parent: 'pad-set',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/pad-set/pad-set-dialog.html',\n                    controller: 'PadSetDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['PadSet', function(PadSet) {\n                            return PadSet.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('pad-set', null, { reload: 'pad-set' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('pad-set.delete', {\n            parent: 'pad-set',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/pad-set/pad-set-delete-dialog.html',\n                    controller: 'PadSetDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['PadSet', function(PadSet) {\n                            return PadSet.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('pad-set', null, { reload: 'pad-set' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('team7App')\n        .factory('PadSet', PadSet);\n\n    PadSet.$inject = ['$resource'];\n\n    function PadSet ($resource) {\n        var resourceUrl =  'api/pad-sets/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('PadSetSearch', PadSetSearch);\n\n    PadSetSearch.$inject = ['$resource'];\n\n    function PadSetSearch($resource) {\n        var resourceUrl =  'api/_search/pad-sets/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('PadSetController', PadSetController);\n\n    PadSetController.$inject = ['$scope', '$state', 'PadSet', 'PadSetSearch'];\n\n    function PadSetController ($scope, $state, PadSet, PadSetSearch) {\n        var vm = this;\n        \n        vm.padSets = [];\n        vm.search = search;\n        vm.loadAll = loadAll;\n\n        loadAll();\n\n        function loadAll() {\n            PadSet.query(function(result) {\n                vm.padSets = result;\n            });\n        }\n\n        function search () {\n            if (!vm.searchQuery) {\n                return vm.loadAll();\n            }\n            PadSetSearch.query({query: vm.searchQuery}, function(result) {\n                vm.padSets = result;\n            });\n        }    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('MetricDialogController', MetricDialogController);\n\n    MetricDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', '$q', 'entity', 'Metric', 'EquipmentSet', 'Threshold'];\n\n    function MetricDialogController ($timeout, $scope, $stateParams, $uibModalInstance, $q, entity, Metric, EquipmentSet, Threshold) {\n        var vm = this;\n\n        vm.metric = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.equipmentsets = EquipmentSet.query();\n        vm.thresholds = Threshold.query({filter: 'metric-is-null'});\n        $q.all([vm.metric.$promise, vm.thresholds.$promise]).then(function() {\n            if (!vm.metric.threshold || !vm.metric.threshold.id) {\n                return $q.reject();\n            }\n            return Threshold.get({id : vm.metric.threshold.id}).$promise;\n        }).then(function(threshold) {\n            vm.thresholds.push(threshold);\n        });\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.metric.id !== null) {\n                Metric.update(vm.metric, onSaveSuccess, onSaveError);\n            } else {\n                Metric.save(vm.metric, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('team7App:metricUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('MetricDetailController', MetricDetailController);\n\n    MetricDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Metric', 'EquipmentSet', 'Threshold'];\n\n    function MetricDetailController($scope, $rootScope, $stateParams, previousState, entity, Metric, EquipmentSet, Threshold) {\n        var vm = this;\n\n        vm.metric = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('team7App:metricUpdate', function(event, result) {\n            vm.metric = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('MetricDeleteController',MetricDeleteController);\n\n    MetricDeleteController.$inject = ['$uibModalInstance', 'entity', 'Metric'];\n\n    function MetricDeleteController($uibModalInstance, entity, Metric) {\n        var vm = this;\n\n        vm.metric = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n        \n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Metric.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('metric', {\n            parent: 'entity',\n            url: '/metric',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Metrics'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/metric/metrics.html',\n                    controller: 'MetricController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('metric-detail', {\n            parent: 'entity',\n            url: '/metric/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Metric'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/metric/metric-detail.html',\n                    controller: 'MetricDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Metric', function($stateParams, Metric) {\n                    return Metric.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'metric',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('metric-detail.edit', {\n            parent: 'metric-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/metric/metric-dialog.html',\n                    controller: 'MetricDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Metric', function(Metric) {\n                            return Metric.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('metric.new', {\n            parent: 'metric',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/metric/metric-dialog.html',\n                    controller: 'MetricDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                name: null,\n                                value: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('metric', null, { reload: 'metric' });\n                }, function() {\n                    $state.go('metric');\n                });\n            }]\n        })\n        .state('metric.edit', {\n            parent: 'metric',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/metric/metric-dialog.html',\n                    controller: 'MetricDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Metric', function(Metric) {\n                            return Metric.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('metric', null, { reload: 'metric' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('metric.delete', {\n            parent: 'metric',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/metric/metric-delete-dialog.html',\n                    controller: 'MetricDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Metric', function(Metric) {\n                            return Metric.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('metric', null, { reload: 'metric' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('team7App')\n        .factory('Metric', Metric);\n\n    Metric.$inject = ['$resource'];\n\n    function Metric ($resource) {\n        var resourceUrl =  'api/metrics/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('MetricSearch', MetricSearch);\n\n    MetricSearch.$inject = ['$resource'];\n\n    function MetricSearch($resource) {\n        var resourceUrl =  'api/_search/metrics/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('MetricController', MetricController);\n\n    MetricController.$inject = ['$scope', '$state', 'Metric', 'MetricSearch'];\n\n    function MetricController ($scope, $state, Metric, MetricSearch) {\n        var vm = this;\n        \n        vm.metrics = [];\n        vm.search = search;\n        vm.loadAll = loadAll;\n\n        loadAll();\n\n        function loadAll() {\n            Metric.query(function(result) {\n                vm.metrics = result;\n            });\n        }\n\n        function search () {\n            if (!vm.searchQuery) {\n                return vm.loadAll();\n            }\n            MetricSearch.query({query: vm.searchQuery}, function(result) {\n                vm.metrics = result;\n            });\n        }    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('EquipmentSetDialogController', EquipmentSetDialogController);\n\n    EquipmentSetDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'EquipmentSet', 'Metric', 'PadSet'];\n\n    function EquipmentSetDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, EquipmentSet, Metric, PadSet) {\n        var vm = this;\n\n        vm.equipmentSet = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.metrics = Metric.query();\n        vm.padsets = PadSet.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.equipmentSet.id !== null) {\n                EquipmentSet.update(vm.equipmentSet, onSaveSuccess, onSaveError);\n            } else {\n                EquipmentSet.save(vm.equipmentSet, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('team7App:equipmentSetUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('EquipmentSetDetailController', EquipmentSetDetailController);\n\n    EquipmentSetDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'EquipmentSet', 'Metric', 'PadSet'];\n\n    function EquipmentSetDetailController($scope, $rootScope, $stateParams, previousState, entity, EquipmentSet, Metric, PadSet) {\n        var vm = this;\n\n        vm.equipmentSet = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('team7App:equipmentSetUpdate', function(event, result) {\n            vm.equipmentSet = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('EquipmentSetDeleteController',EquipmentSetDeleteController);\n\n    EquipmentSetDeleteController.$inject = ['$uibModalInstance', 'entity', 'EquipmentSet'];\n\n    function EquipmentSetDeleteController($uibModalInstance, entity, EquipmentSet) {\n        var vm = this;\n\n        vm.equipmentSet = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n        \n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            EquipmentSet.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('equipment-set', {\n            parent: 'entity',\n            url: '/equipment-set',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'EquipmentSets'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/equipment-set/equipment-sets.html',\n                    controller: 'EquipmentSetController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('equipment-set-detail', {\n            parent: 'entity',\n            url: '/equipment-set/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'EquipmentSet'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/equipment-set/equipment-set-detail.html',\n                    controller: 'EquipmentSetDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'EquipmentSet', function($stateParams, EquipmentSet) {\n                    return EquipmentSet.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'equipment-set',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('equipment-set-detail.edit', {\n            parent: 'equipment-set-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/equipment-set/equipment-set-dialog.html',\n                    controller: 'EquipmentSetDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['EquipmentSet', function(EquipmentSet) {\n                            return EquipmentSet.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('equipment-set.new', {\n            parent: 'equipment-set',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/equipment-set/equipment-set-dialog.html',\n                    controller: 'EquipmentSetDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                name: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('equipment-set', null, { reload: 'equipment-set' });\n                }, function() {\n                    $state.go('equipment-set');\n                });\n            }]\n        })\n        .state('equipment-set.edit', {\n            parent: 'equipment-set',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/equipment-set/equipment-set-dialog.html',\n                    controller: 'EquipmentSetDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['EquipmentSet', function(EquipmentSet) {\n                            return EquipmentSet.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('equipment-set', null, { reload: 'equipment-set' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('equipment-set.delete', {\n            parent: 'equipment-set',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/equipment-set/equipment-set-delete-dialog.html',\n                    controller: 'EquipmentSetDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['EquipmentSet', function(EquipmentSet) {\n                            return EquipmentSet.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('equipment-set', null, { reload: 'equipment-set' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('team7App')\n        .factory('EquipmentSet', EquipmentSet);\n\n    EquipmentSet.$inject = ['$resource'];\n\n    function EquipmentSet ($resource) {\n        var resourceUrl =  'api/equipment-sets/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('EquipmentSetSearch', EquipmentSetSearch);\n\n    EquipmentSetSearch.$inject = ['$resource'];\n\n    function EquipmentSetSearch($resource) {\n        var resourceUrl =  'api/_search/equipment-sets/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('EquipmentSetController', EquipmentSetController);\n\n    EquipmentSetController.$inject = ['$scope', '$state', 'EquipmentSet', 'EquipmentSetSearch'];\n\n    function EquipmentSetController ($scope, $state, EquipmentSet, EquipmentSetSearch) {\n        var vm = this;\n        \n        vm.equipmentSets = [];\n        vm.search = search;\n        vm.loadAll = loadAll;\n\n        loadAll();\n\n        function loadAll() {\n            EquipmentSet.query(function(result) {\n                vm.equipmentSets = result;\n            });\n        }\n\n        function search () {\n            if (!vm.searchQuery) {\n                return vm.loadAll();\n            }\n            EquipmentSetSearch.query({query: vm.searchQuery}, function(result) {\n                vm.equipmentSets = result;\n            });\n        }    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('entity', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .filter('words', words);\n\n    function words() {\n        return wordsFilter;\n\n        function wordsFilter(input, words) {\n            if (isNaN(words)) {\n                return input;\n            }\n            if (words <= 0) {\n                return '';\n            }\n            if (input) {\n                var inputWords = input.split(/\\s+/);\n                if (inputWords.length > words) {\n                    input = inputWords.slice(0, words).join(' ') + '...';\n                }\n            }\n            \n            return input;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .filter('characters', characters);\n        \n    function characters () {\n        return charactersFilter;\n\n        function charactersFilter(input, chars, breakOnWord) {\n            if (isNaN(chars)) {\n                return input;\n            }\n            if (chars <= 0) {\n                return '';\n            }\n            if (input && input.length > chars) {\n                input = input.substring(0, chars);\n\n                if (!breakOnWord) {\n                    var lastspace = input.lastIndexOf(' ');\n                    // Get last space\n                    if (lastspace !== -1) {\n                        input = input.substr(0, lastspace);\n                    }\n                } else {\n                    while (input.charAt(input.length-1) === ' ') {\n                        input = input.substr(0, input.length - 1);\n                    }\n                }\n                return input + '...';\n            }\n            return input;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .directive('jhSortBy', jhSortBy);\n\n    function jhSortBy() {\n        var directive = {\n            restrict: 'A',\n            scope: false,\n            require: '^jhSort',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs, parentCtrl) {\n            element.bind('click', function () {\n                parentCtrl.sort(attrs.jhSortBy);\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .directive('jhSort', jhSort);\n\n    function jhSort () {\n        var directive = {\n            restrict: 'A',\n            scope: {\n                predicate: '=jhSort',\n                ascending: '=',\n                callback: '&'\n            },\n            controller: SortController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n    }\n\n    SortController.$inject = ['$scope', '$element'];\n\n    function SortController ($scope, $element) {\n        var vm = this;\n\n        vm.applyClass = applyClass;\n        vm.resetClasses = resetClasses;\n        vm.sort = sort;\n        vm.triggerApply = triggerApply;\n\n        $scope.$watchGroup(['vm.predicate', 'vm.ascending'], vm.triggerApply);\n        vm.triggerApply();\n\n        function applyClass (element) {\n            var thisIcon = element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt',\n                remove = sortIcon + ' ' + sortDesc,\n                add = sortAsc;\n            if (!vm.ascending) {\n                remove = sortIcon + ' ' + sortAsc;\n                add = sortDesc;\n            }\n            vm.resetClasses();\n            thisIcon.removeClass(remove);\n            thisIcon.addClass(add);\n        }\n\n        function resetClasses () {\n            var allThIcons = $element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt';\n            allThIcons.removeClass(sortAsc + ' ' + sortDesc);\n            allThIcons.addClass(sortIcon);\n        }\n\n        function sort (field) {\n            if (field !== vm.predicate) {\n                vm.ascending = true;\n            } else {\n                vm.ascending = !vm.ascending;\n            }\n            vm.predicate = field;\n            $scope.$apply();\n            vm.callback();\n        }\n\n        function triggerApply (values)  {\n            vm.resetClasses();\n            if (values && values[0] !== '_score') {\n                vm.applyClass($element.find('th[jh-sort-by=\\'' + values[0] + '\\']'));\n            }\n        }\n    }\n})();\n","(function(){\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('ParseLinks', ParseLinks);\n\n    function ParseLinks () {\n\n        var service = {\n            parse : parse\n        };\n\n        return service;\n\n        function parse(header) {\n            if (header.length === 0) {\n                throw new Error('input must not be of zero length');\n            }\n\n            // Split parts by comma\n            var parts = header.split(',');\n            var links = {};\n            // Parse each part into a named link\n            angular.forEach(parts, function(p) {\n                var section = p.split(';');\n                if (section.length !== 2) {\n                    throw new Error('section could not be split on \";\"');\n                }\n                var url = section[0].replace(/<(.*)>/, '$1').trim();\n                var queryString = {};\n                url.replace(\n                    new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n                    function($0, $1, $2, $3) { queryString[$1] = $3; }\n                );\n                var page = queryString.page;\n                if (angular.isString(page)) {\n                    page = parseInt(page);\n                }\n                var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n                links[name] = page;\n            });\n            return links;\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('PaginationUtil', PaginationUtil);\n\n    function PaginationUtil () {\n\n        var service = {\n            parseAscending : parseAscending,\n            parsePage : parsePage,\n            parsePredicate : parsePredicate\n        };\n\n        return service;\n\n        function parseAscending (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                return sort.split(',').slice(-1)[0] === 'asc';\n            } else {\n                // default to true if no sort defined\n                return true;\n            }\n        }\n\n        // query params are strings, and need to be parsed\n        function parsePage (page) {\n            return parseInt(page);\n        }\n\n        // sort can be in the format `id,asc` or `id`\n        function parsePredicate (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                sortArray.pop();\n            }\n            return sortArray.join(',');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    var jhiItemCount = {\n        template: '<div class=\"info\">' +\n                    'Showing {{(($ctrl.page - 1) * $ctrl.itemsPerPage) == 0 ? 1 : (($ctrl.page - 1) * $ctrl.itemsPerPage + 1)}} - ' +\n                    '{{($ctrl.page * $ctrl.itemsPerPage) < $ctrl.queryCount ? ($ctrl.page * $ctrl.itemsPerPage) : $ctrl.queryCount}} ' +\n                    'of {{$ctrl.queryCount}} items.' +\n                '</div>',\n        bindings: {\n            page: '<',\n            queryCount: '<total',\n            itemsPerPage: '<'\n        }\n    };\n\n    angular\n        .module('team7App')\n        .component('jhiItemCount', jhiItemCount);\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('DateUtils', DateUtils);\n\n    DateUtils.$inject = ['$filter'];\n\n    function DateUtils ($filter) {\n\n        var service = {\n            convertDateTimeFromServer : convertDateTimeFromServer,\n            convertLocalDateFromServer : convertLocalDateFromServer,\n            convertLocalDateToServer : convertLocalDateToServer,\n            dateformat : dateformat\n        };\n\n        return service;\n\n        function convertDateTimeFromServer (date) {\n            if (date) {\n                return new Date(date);\n            } else {\n                return null;\n            }\n        }\n\n        function convertLocalDateFromServer (date) {\n            if (date) {\n                var dateString = date.split('-');\n                return new Date(dateString[0], dateString[1] - 1, dateString[2]);\n            }\n            return null;\n        }\n\n        function convertLocalDateToServer (date) {\n            if (date) {\n                return $filter('date')(date, 'yyyy-MM-dd');\n            } else {\n                return null;\n            }\n        }\n\n        function dateformat () {\n            return 'yyyy-MM-dd';\n        }\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('DataUtils', DataUtils);\n\n    DataUtils.$inject = ['$window'];\n\n    function DataUtils ($window) {\n\n        var service = {\n            abbreviate: abbreviate,\n            byteSize: byteSize,\n            openFile: openFile,\n            toBase64: toBase64\n        };\n\n        return service;\n\n        function abbreviate (text) {\n            if (!angular.isString(text)) {\n                return '';\n            }\n            if (text.length < 30) {\n                return text;\n            }\n            return text ? (text.substring(0, 15) + '...' + text.slice(-10)) : '';\n        }\n\n        function byteSize (base64String) {\n            if (!angular.isString(base64String)) {\n                return '';\n            }\n\n            function endsWith(suffix, str) {\n                return str.indexOf(suffix, str.length - suffix.length) !== -1;\n            }\n\n            function paddingSize(base64String) {\n                if (endsWith('==', base64String)) {\n                    return 2;\n                }\n                if (endsWith('=', base64String)) {\n                    return 1;\n                }\n                return 0;\n            }\n\n            function size(base64String) {\n                return base64String.length / 4 * 3 - paddingSize(base64String);\n            }\n\n            function formatAsBytes(size) {\n                return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ') + ' bytes';\n            }\n\n            return formatAsBytes(size(base64String));\n        }\n\n        function openFile (type, data) {\n            $window.open('data:' + type + ';base64,' + data, '_blank', 'height=300,width=400');\n        }\n\n        function toBase64 (file, cb) {\n            var fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = function (e) {\n                var base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);\n                cb(base64Data);\n            };\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .filter('capitalize', capitalize);\n\n    function capitalize() {\n        return capitalizeFilter;\n\n        function capitalizeFilter (input) {\n            if (input !== null) {\n                input = input.toLowerCase();\n                input = input.substring(0, 1).toUpperCase() + input.substring(1)\n            }\n            return input;\n        }\n    }\n})();\n","(function() {\n    /*jshint bitwise: false*/\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('Base64', Base64);\n\n    function Base64 () {\n        var keyStr = 'ABCDEFGHIJKLMNOP' +\n            'QRSTUVWXYZabcdef' +\n            'ghijklmnopqrstuv' +\n            'wxyz0123456789+/' +\n            '=';\n\n        var service = {\n            decode : decode,\n            encode : encode\n        };\n\n        return service;\n\n        function encode (input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            while (i < input.length) {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                output = output +\n                    keyStr.charAt(enc1) +\n                    keyStr.charAt(enc2) +\n                    keyStr.charAt(enc3) +\n                    keyStr.charAt(enc4);\n            }\n\n            return output;\n        }\n\n        function decode (input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n            while (i < input.length) {\n                enc1 = keyStr.indexOf(input.charAt(i++));\n                enc2 = keyStr.indexOf(input.charAt(i++));\n                enc3 = keyStr.indexOf(input.charAt(i++));\n                enc4 = keyStr.indexOf(input.charAt(i++));\n\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 !== 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 !== 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n            }\n\n            return output;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('LoginService', LoginService);\n\n    LoginService.$inject = ['$uibModal'];\n\n    function LoginService ($uibModal) {\n        var service = {\n            open: open\n        };\n\n        var modalInstance = null;\n        var resetModal = function () {\n            modalInstance = null;\n        };\n\n        return service;\n\n        function open () {\n            if (modalInstance !== null) return;\n            modalInstance = $uibModal.open({\n                animation: true,\n                templateUrl: 'app/components/login/login.html',\n                controller: 'LoginController',\n                controllerAs: 'vm'\n            });\n            modalInstance.result.then(\n                resetModal,\n                resetModal\n            );\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('LoginController', LoginController);\n\n    LoginController.$inject = ['$rootScope', '$state', '$timeout', 'Auth', '$uibModalInstance'];\n\n    function LoginController ($rootScope, $state, $timeout, Auth, $uibModalInstance) {\n        var vm = this;\n\n        vm.authenticationError = false;\n        vm.cancel = cancel;\n        vm.credentials = {};\n        vm.login = login;\n        vm.password = null;\n        vm.register = register;\n        vm.rememberMe = true;\n        vm.requestResetPassword = requestResetPassword;\n        vm.username = null;\n\n        $timeout(function (){angular.element('#username').focus();});\n\n        function cancel () {\n            vm.credentials = {\n                username: null,\n                password: null,\n                rememberMe: true\n            };\n            vm.authenticationError = false;\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function login (event) {\n            event.preventDefault();\n            Auth.login({\n                username: vm.username,\n                password: vm.password,\n                rememberMe: vm.rememberMe\n            }).then(function () {\n                vm.authenticationError = false;\n                $uibModalInstance.close();\n                if ($state.current.name === 'register' || $state.current.name === 'activate' ||\n                    $state.current.name === 'finishReset' || $state.current.name === 'requestReset') {\n                    $state.go('home');\n                }\n\n                $rootScope.$broadcast('authenticationSuccess');\n\n                // previousState was set in the authExpiredInterceptor before being redirected to login modal.\n                // since login is succesful, go to stored previousState and clear previousState\n                if (Auth.getPreviousState()) {\n                    var previousState = Auth.getPreviousState();\n                    Auth.resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n            }).catch(function () {\n                vm.authenticationError = true;\n            });\n        }\n\n        function register () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('register');\n        }\n\n        function requestResetPassword () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('requestReset');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .directive('showValidation', showValidation);\n\n    function showValidation () {\n        var directive = {\n            restrict: 'A',\n            require: 'form',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, formCtrl) {\n            element.find('.form-group').each(function() {\n                var $formGroup = angular.element(this);\n                var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');\n\n                if ($inputs.length > 0) {\n                    $inputs.each(function() {\n                        var $input = angular.element(this);\n                        var inputName = $input.attr('name');\n                        scope.$watch(function() {\n                            return formCtrl[inputName].$invalid && formCtrl[inputName].$dirty;\n                        }, function(isInvalid) {\n                            $formGroup.toggleClass('has-error', isInvalid);\n                        });\n                    });\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .constant('paginationConstants', {\n            'itemsPerPage': 20\n        });\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .directive('minbytes', minbytes);\n\n    function minbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.minbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) >= attrs.minbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .directive('maxbytes', maxbytes);\n\n    function maxbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.maxbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) <= attrs.maxbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    var jhiAlertError = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre>{{ alert.msg }}</pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertErrorController\n    };\n\n    angular\n        .module('team7App')\n        .component('jhiAlertError', jhiAlertError);\n\n    jhiAlertErrorController.$inject = ['$scope', 'AlertService', '$rootScope'];\n\n    function jhiAlertErrorController ($scope, AlertService, $rootScope) {\n        var vm = this;\n\n        vm.alerts = [];\n\n        function addErrorAlert (message, key, data) {\n            vm.alerts.push(\n                AlertService.add(\n                    {\n                        type: 'danger',\n                        msg: message,\n                        timeout: 5000,\n                        toast: AlertService.isToast(),\n                        scoped: true\n                    },\n                    vm.alerts\n                )\n            );\n        }\n\n        var cleanHttpErrorListener = $rootScope.$on('team7App.httpError', function (event, httpResponse) {\n            var i;\n            event.stopPropagation();\n            switch (httpResponse.status) {\n            // connection refused, server not reachable\n            case 0:\n                addErrorAlert('Server not reachable','error.server.not.reachable');\n                break;\n\n            case 400:\n                var errorHeader = httpResponse.headers('X-team7App-error');\n                var entityKey = httpResponse.headers('X-team7App-params');\n                if (errorHeader) {\n                    var entityName = entityKey;\n                    addErrorAlert(errorHeader, errorHeader, {entityName: entityName});\n                } else if (httpResponse.data && httpResponse.data.fieldErrors) {\n                    for (i = 0; i < httpResponse.data.fieldErrors.length; i++) {\n                        var fieldError = httpResponse.data.fieldErrors[i];\n                        // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                        var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                        var fieldName = convertedField.charAt(0).toUpperCase() + convertedField.slice(1);\n                        addErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {fieldName: fieldName});\n                    }\n                } else if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);\n                } else {\n                    addErrorAlert(httpResponse.data);\n                }\n                break;\n\n            case 404:\n                addErrorAlert('Not found','error.url.not.found');\n                break;\n\n            default:\n                if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message);\n                } else {\n                    addErrorAlert(angular.toJson(httpResponse));\n                }\n            }\n        });\n\n        $scope.$on('$destroy', function () {\n            if(angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null){\n                cleanHttpErrorListener();\n                vm.alerts = [];\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .provider('AlertService', AlertService);\n\n    function AlertService () {\n        this.toast = false;\n        /*jshint validthis: true */\n        this.$get = getService;\n\n        this.showAsToast = function(isToast) {\n            this.toast = isToast;\n        };\n\n        getService.$inject = ['$timeout', '$sce'];\n\n        function getService ($timeout, $sce) {\n            var toast = this.toast,\n                alertId = 0, // unique id for each alert. Starts from 0.\n                alerts = [],\n                timeout = 5000; // default timeout\n\n            return {\n                factory: factory,\n                isToast: isToast,\n                add: addAlert,\n                closeAlert: closeAlert,\n                closeAlertByIndex: closeAlertByIndex,\n                clear: clear,\n                get: get,\n                success: success,\n                error: error,\n                info: info,\n                warning : warning\n            };\n\n            function isToast() {\n                return toast;\n            }\n\n            function clear() {\n                alerts = [];\n            }\n\n            function get() {\n                return alerts;\n            }\n\n            function success(msg, params, position) {\n                return this.add({\n                    type: 'success',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function error(msg, params, position) {\n                return this.add({\n                    type: 'danger',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function warning(msg, params, position) {\n                return this.add({\n                    type: 'warning',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function info(msg, params, position) {\n                return this.add({\n                    type: 'info',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function factory(alertOptions) {\n                var alert = {\n                    type: alertOptions.type,\n                    msg: $sce.trustAsHtml(alertOptions.msg),\n                    id: alertOptions.alertId,\n                    timeout: alertOptions.timeout,\n                    toast: alertOptions.toast,\n                    position: alertOptions.position ? alertOptions.position : 'top right',\n                    scoped: alertOptions.scoped,\n                    close: function (alerts) {\n                        return closeAlert(this.id, alerts);\n                    }\n                };\n                if(!alert.scoped) {\n                    alerts.push(alert);\n                }\n                return alert;\n            }\n\n            function addAlert(alertOptions, extAlerts) {\n                alertOptions.alertId = alertId++;\n                var that = this;\n                var alert = this.factory(alertOptions);\n                if (alertOptions.timeout && alertOptions.timeout > 0) {\n                    $timeout(function () {\n                        that.closeAlert(alertOptions.alertId, extAlerts);\n                    }, alertOptions.timeout);\n                }\n                return alert;\n            }\n\n            function closeAlert(id, extAlerts) {\n                var thisAlerts = extAlerts ? extAlerts : alerts;\n                return closeAlertByIndex(thisAlerts.map(function(e) { return e.id; }).indexOf(id), thisAlerts);\n            }\n\n            function closeAlertByIndex(index, thisAlerts) {\n                return thisAlerts.splice(index, 1);\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    var jhiAlert = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre ng-bind-html=\"alert.msg\"></pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertController\n    };\n\n    angular\n        .module('team7App')\n        .component('jhiAlert', jhiAlert);\n\n    jhiAlertController.$inject = ['$scope', 'AlertService'];\n\n    function jhiAlertController($scope, AlertService) {\n        var vm = this;\n\n        vm.alerts = AlertService.get();\n        $scope.$on('$destroy', function () {\n            vm.alerts = [];\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('notificationInterceptor', notificationInterceptor);\n\n    notificationInterceptor.$inject = ['$q', 'AlertService'];\n\n    function notificationInterceptor ($q, AlertService) {\n        var service = {\n            response: response\n        };\n\n        return service;\n\n        function response (response) {\n            var alertKey = response.headers('X-team7App-alert');\n            if (angular.isString(alertKey)) {\n                AlertService.success(alertKey, { param : response.headers('X-team7App-params')});\n            }\n            return response;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('errorHandlerInterceptor', errorHandlerInterceptor);\n\n    errorHandlerInterceptor.$inject = ['$q', '$rootScope'];\n\n    function errorHandlerInterceptor ($q, $rootScope) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError (response) {\n            if (!(response.status === 401 && (response.data === '' || (response.data.path && response.data.path.indexOf('/api/account') === 0 )))) {\n                $rootScope.$emit('team7App.httpError', response);\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('authExpiredInterceptor', authExpiredInterceptor);\n\n    \n    authExpiredInterceptor.$inject = ['$rootScope', '$q', '$injector', '$document'];\n\n    function authExpiredInterceptor($rootScope, $q, $injector, $document) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError(response) {\n            // If we have an unauthorized request we redirect to the login page\n            // Don't do this check on the account API to avoid infinite loop\n            if (response.status === 401 && angular.isDefined(response.data.path) && response.data.path.indexOf('/api/account') === -1) {\n                var Auth = $injector.get('Auth');\n                var to = $rootScope.toState;\n                var params = $rootScope.toStateParams;\n                Auth.logout();\n                if (to.name !== 'accessdenied') {\n                    Auth.storePreviousState(to.name, params);\n                }\n                var LoginService = $injector.get('LoginService');\n                LoginService.open();\n            } else if (response.status === 403 && response.config.method !== 'GET' && getCSRF() === '') {\n                // If the CSRF token expired, then try to get a new CSRF token and retry the old request\n                var $http = $injector.get('$http');\n                return $http.get('/').finally(function() { return afterCSRFRenewed(response); });\n            }\n            return $q.reject(response);\n        }\n\n        function getCSRF() {\n            var doc = $document[0];\n            if (doc) {\n                var name = 'CSRF-TOKEN=';\n                var ca = doc.cookie.split(';');\n                for (var i = 0; i < ca.length; i++) {\n                    var c = ca[i];\n                    while (c.charAt(0) === ' ') {c = c.substring(1);}\n\n                    if (c.indexOf(name) !== -1) {\n                        return c.substring(name.length, c.length);\n                    }\n                }\n            }\n            return '';\n        }\n\n        function afterCSRFRenewed(oldResponse) {\n            if (getCSRF() !== '') {\n                // retry the old request after the new CSRF-TOKEN is obtained\n                var $http = $injector.get('$http');\n                return $http(oldResponse.config);\n            } else {\n                // unlikely get here but reject with the old response any way and avoid infinite loop\n                return $q.reject(oldResponse);\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('stateHandler', stateHandler);\n\n    stateHandler.$inject = ['$rootScope', '$state', '$sessionStorage',  '$window',\n        'Auth', 'Principal', 'VERSION'];\n\n    function stateHandler($rootScope, $state, $sessionStorage,  $window,\n        Auth, Principal, VERSION) {\n        return {\n            initialize: initialize\n        };\n\n        function initialize() {\n            $rootScope.VERSION = VERSION;\n\n            var stateChangeStart = $rootScope.$on('$stateChangeStart', function (event, toState, toStateParams, fromState) {\n                $rootScope.toState = toState;\n                $rootScope.toStateParams = toStateParams;\n                $rootScope.fromState = fromState;\n\n                // Redirect to a state with an external URL (http://stackoverflow.com/a/30221248/1098564)\n                if (toState.external) {\n                    event.preventDefault();\n                    $window.open(toState.url, '_self');\n                }\n\n                if (Principal.isIdentityResolved()) {\n                    Auth.authorize();\n                }\n\n                \n            });\n\n            var stateChangeSuccess = $rootScope.$on('$stateChangeSuccess',  function(event, toState, toParams, fromState, fromParams) {\n                var titleKey = 'team7' ;\n\n                // Set the page title key to the one configured in state or use default one\n                if (toState.data.pageTitle) {\n                    titleKey = toState.data.pageTitle;\n                }\n                $window.document.title = titleKey;\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(stateChangeStart) && stateChangeStart !== null){\n                    stateChangeStart();\n                }\n                if(angular.isDefined(stateChangeSuccess) && stateChangeSuccess !== null){\n                    stateChangeSuccess();\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(paginationConfig);\n\n    paginationConfig.$inject = ['uibPaginationConfig', 'paginationConstants'];\n\n    function paginationConfig(uibPaginationConfig, paginationConstants) {\n        uibPaginationConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPaginationConfig.maxSize = 5;\n        uibPaginationConfig.boundaryLinks = true;\n        uibPaginationConfig.firstText = '«';\n        uibPaginationConfig.previousText = '‹';\n        uibPaginationConfig.nextText = '›';\n        uibPaginationConfig.lastText = '»';\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(pagerConfig);\n\n    pagerConfig.$inject = ['uibPagerConfig', 'paginationConstants'];\n\n    function pagerConfig(uibPagerConfig, paginationConstants) {\n        uibPagerConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPagerConfig.previousText = '«';\n        uibPagerConfig.nextText = '»';\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(localStorageConfig);\n\n    localStorageConfig.$inject = ['$localStorageProvider', '$sessionStorageProvider'];\n\n    function localStorageConfig($localStorageProvider, $sessionStorageProvider) {\n        $localStorageProvider.setKeyPrefix('jhi-');\n        $sessionStorageProvider.setKeyPrefix('jhi-');\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(httpConfig);\n\n    httpConfig.$inject = ['$urlRouterProvider', '$httpProvider', 'httpRequestInterceptorCacheBusterProvider', '$urlMatcherFactoryProvider'];\n\n    function httpConfig($urlRouterProvider, $httpProvider, httpRequestInterceptorCacheBusterProvider, $urlMatcherFactoryProvider) {\n        \n        //enable CSRF\n        $httpProvider.defaults.xsrfCookieName = 'CSRF-TOKEN';\n        $httpProvider.defaults.xsrfHeaderName = 'X-CSRF-TOKEN';\n        \n        //Cache everything except rest api requests\n        httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);\n\n        $urlRouterProvider.otherwise('/');\n\n        $httpProvider.interceptors.push('errorHandlerInterceptor');\n        $httpProvider.interceptors.push('authExpiredInterceptor');\n        $httpProvider.interceptors.push('notificationInterceptor');\n        // jhipster-needle-angularjs-add-interceptor JHipster will add new application http interceptor here\n\n        $urlMatcherFactoryProvider.type('boolean', {\n            name : 'boolean',\n            decode: function(val) { return val === true || val === 'true'; },\n            encode: function(val) { return val ? 1 : 0; },\n            equals: function(a, b) { return this.is(a) && a === b; },\n            is: function(val) { return [true,false,0,1].indexOf(val) >= 0; },\n            pattern: /bool|true|0|1/\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(compileServiceConfig);\n\n    compileServiceConfig.$inject = ['$compileProvider','DEBUG_INFO_ENABLED'];\n\n    function compileServiceConfig($compileProvider,DEBUG_INFO_ENABLED) {\n        // disable debug data on prod profile to improve performance\n        $compileProvider.debugInfoEnabled(DEBUG_INFO_ENABLED);\n        \n        /*\n        If you wish to debug an application with this information\n        then you should open up a debug console in the browser\n        then call this method directly in this console:\n\n\t\tangular.reloadWithDebugInfo();\n\t\t*/\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(alertServiceConfig);\n\n    alertServiceConfig.$inject = ['AlertServiceProvider'];\n\n    function alertServiceConfig(AlertServiceProvider) {\n        // set below to true to make alerts look like toast\n        AlertServiceProvider.showAsToast(false);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('app', {\n            abstract: true,\n            views: {\n                'navbar@': {\n                    templateUrl: 'app/layouts/navbar/navbar.html',\n                    controller: 'NavbarController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                authorize: ['Auth',\n                    function (Auth) {\n                        return Auth.authorize();\n                    }\n                ]\n            }\n        });\n    }\n})();\n","(function () {\n    'use strict';\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular\n        .module('team7App')\n        .constant('VERSION', \"0.0.1-SNAPSHOT\")\n        .constant('DEBUG_INFO_ENABLED', false)\n;\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('UserManagementDialogController',UserManagementDialogController);\n\n    UserManagementDialogController.$inject = ['$stateParams', '$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDialogController ($stateParams, $uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.clear = clear;\n        vm.languages = null;\n        vm.save = save;\n        vm.user = entity;\n\n\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function onSaveSuccess (result) {\n            vm.isSaving = false;\n            $uibModalInstance.close(result);\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.user.id !== null) {\n                User.update(vm.user, onSaveSuccess, onSaveError);\n            } else {\n                vm.user.langKey = 'en';\n                User.save(vm.user, onSaveSuccess, onSaveError);\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('UserManagementDetailController', UserManagementDetailController);\n\n    UserManagementDetailController.$inject = ['$stateParams', 'User'];\n\n    function UserManagementDetailController ($stateParams, User) {\n        var vm = this;\n\n        vm.load = load;\n        vm.user = {};\n\n        vm.load($stateParams.login);\n\n        function load (login) {\n            User.get({login: login}, function(result) {\n                vm.user = result;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('UserManagementDeleteController', UserManagementDeleteController);\n\n    UserManagementDeleteController.$inject = ['$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDeleteController ($uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.user = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (login) {\n            User.delete({login: login},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('user-management', {\n            parent: 'admin',\n            url: '/user-management?page&sort',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Users'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management.html',\n                    controller: 'UserManagementController',\n                    controllerAs: 'vm'\n                }\n            },            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                }\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort)\n                    };\n                }]\n            }        })\n        .state('user-management-detail', {\n            parent: 'admin',\n            url: '/user/:login',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'team7'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management-detail.html',\n                    controller: 'UserManagementDetailController',\n                    controllerAs: 'vm'\n                }\n            }\n        })\n        .state('user-management.new', {\n            parent: 'user-management',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                id: null, login: null, firstName: null, lastName: null, email: null,\n                                activated: true, langKey: null, createdBy: null, createdDate: null,\n                                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                                resetKey: null, authorities: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('user-management');\n                });\n            }]\n        })\n        .state('user-management.edit', {\n            parent: 'user-management',\n            url: '/{login}/edit',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('user-management.delete', {\n            parent: 'user-management',\n            url: '/{login}/delete',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-delete-dialog.html',\n                    controller: 'UserManagementDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('UserManagementController', UserManagementController);\n\n    UserManagementController.$inject = ['Principal', 'User', 'ParseLinks', 'AlertService', '$state', 'pagingParams', 'paginationConstants'];\n\n    function UserManagementController(Principal, User, ParseLinks, AlertService, $state, pagingParams, paginationConstants) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.currentAccount = null;\n        vm.languages = null;\n        vm.loadAll = loadAll;\n        vm.setActive = setActive;\n        vm.users = [];\n        vm.page = 1;\n        vm.totalItems = null;\n        vm.clear = clear;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.transition = transition;\n\n        vm.loadAll();\n        \n        Principal.identity().then(function(account) {\n            vm.currentAccount = account;\n        });\n\n        function setActive (user, isActivated) {\n            user.activated = isActivated;\n            User.update(user, function () {\n                vm.loadAll();\n                vm.clear();\n            });\n        }\n\n        function loadAll () {\n            User.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n        }\n\n        function onSuccess(data, headers) {\n            //hide anonymous user from user management: it's a required user for Spring Security\n            for (var i in data) {\n                if (data[i]['login'] === 'anonymoususer') {\n                    data.splice(i, 1);\n                }\n            }\n            vm.links = ParseLinks.parse(headers('link'));\n            vm.totalItems = headers('X-Total-Count');\n            vm.queryCount = vm.totalItems;\n            vm.page = pagingParams.page;\n            vm.users = data;\n        }\n\n        function onError(error) {\n            AlertService.error(error.data.message);\n        }\n\n        function clear () {\n            vm.user = {\n                id: null, login: null, firstName: null, lastName: null, email: null,\n                activated: null, langKey: null, createdBy: null, createdDate: null,\n                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                resetKey: null, authorities: null\n            };\n        }\n\n        function sort () {\n            var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n            if (vm.predicate !== 'id') {\n                result.push('id');\n            }\n            return result;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-metrics', {\n            parent: 'admin',\n            url: '/metrics',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Application Metrics'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/metrics/metrics.html',\n                    controller: 'JhiMetricsMonitoringController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('JhiMetricsService', JhiMetricsService);\n\n    JhiMetricsService.$inject = ['$rootScope', '$http'];\n\n    function JhiMetricsService ($rootScope, $http) {\n        var service = {\n            getMetrics: getMetrics,\n            threadDump: threadDump\n        };\n\n        return service;\n\n        function getMetrics () {\n            return $http.get('management/jhipster/metrics').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function threadDump () {\n            return $http.get('management/dump').then(function (response) {\n                return response.data;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('JhiMetricsMonitoringModalController', JhiMetricsMonitoringModalController);\n\n    JhiMetricsMonitoringModalController.$inject = ['$uibModalInstance', 'threadDump'];\n\n    function JhiMetricsMonitoringModalController ($uibModalInstance, threadDump) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.getLabelClass = getLabelClass;\n        vm.threadDump = threadDump;\n        vm.threadDumpAll = 0;\n        vm.threadDumpBlocked = 0;\n        vm.threadDumpRunnable = 0;\n        vm.threadDumpTimedWaiting = 0;\n        vm.threadDumpWaiting = 0;\n\n        angular.forEach(threadDump, function(value) {\n            if (value.threadState === 'RUNNABLE') {\n                vm.threadDumpRunnable += 1;\n            } else if (value.threadState === 'WAITING') {\n                vm.threadDumpWaiting += 1;\n            } else if (value.threadState === 'TIMED_WAITING') {\n                vm.threadDumpTimedWaiting += 1;\n            } else if (value.threadState === 'BLOCKED') {\n                vm.threadDumpBlocked += 1;\n            }\n        });\n\n        vm.threadDumpAll = vm.threadDumpRunnable + vm.threadDumpWaiting +\n            vm.threadDumpTimedWaiting + vm.threadDumpBlocked;\n\n        function cancel () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function getLabelClass (threadState) {\n            if (threadState === 'RUNNABLE') {\n                return 'label-success';\n            } else if (threadState === 'WAITING') {\n                return 'label-info';\n            } else if (threadState === 'TIMED_WAITING') {\n                return 'label-warning';\n            } else if (threadState === 'BLOCKED') {\n                return 'label-danger';\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('JhiMetricsMonitoringController', JhiMetricsMonitoringController);\n\n    JhiMetricsMonitoringController.$inject = ['$scope','JhiMetricsService', '$uibModal'];\n\n    function JhiMetricsMonitoringController ($scope, JhiMetricsService, $uibModal) {\n        var vm = this;\n\n        vm.cachesStats = {};\n        vm.metrics = {};\n        vm.refresh = refresh;\n        vm.refreshThreadDumpData = refreshThreadDumpData;\n        vm.servicesStats = {};\n        vm.updatingMetrics = true;\n\n        vm.refresh();\n\n        $scope.$watch('vm.metrics', function (newValue) {\n            vm.servicesStats = {};\n            vm.cachesStats = {};\n            angular.forEach(newValue.timers, function (value, key) {\n                if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {\n                    vm.servicesStats[key] = value;\n                }\n                if (key.indexOf('net.sf.ehcache.Cache') !== -1) {\n                    // remove gets or puts\n                    var index = key.lastIndexOf('.');\n                    var newKey = key.substr(0, index);\n\n                    // Keep the name of the domain\n                    vm.cachesStats[newKey] = {\n                        'name': newKey,\n                        'value': value\n                    };\n                }\n            });\n        });\n\n        function refresh () {\n            vm.updatingMetrics = true;\n            JhiMetricsService.getMetrics().then(function (promise) {\n                vm.metrics = promise;\n                vm.updatingMetrics = false;\n            }, function (promise) {\n                vm.metrics = promise.data;\n                vm.updatingMetrics = false;\n            });\n        }\n\n        function refreshThreadDumpData () {\n            JhiMetricsService.threadDump().then(function(data) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/metrics/metrics.modal.html',\n                    controller: 'JhiMetricsMonitoringModalController',\n                    controllerAs: 'vm',\n                    size: 'lg',\n                    resolve: {\n                        threadDump: function() {\n                            return data;\n                        }\n\n                    }\n                });\n            });\n        }\n\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('logs', {\n            parent: 'admin',\n            url: '/logs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Logs'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/logs/logs.html',\n                    controller: 'LogsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('LogsService', LogsService);\n\n    LogsService.$inject = ['$resource'];\n\n    function LogsService ($resource) {\n        var service = $resource('management/jhipster/logs', {}, {\n            'findAll': { method: 'GET', isArray: true},\n            'changeLevel': { method: 'PUT'}\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('LogsController', LogsController);\n\n    LogsController.$inject = ['LogsService'];\n\n    function LogsController (LogsService) {\n        var vm = this;\n\n        vm.changeLevel = changeLevel;\n        vm.loggers = LogsService.findAll();\n\n        function changeLevel (name, level) {\n            LogsService.changeLevel({name: name, level: level}, function () {\n                vm.loggers = LogsService.findAll();\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-health', {\n            parent: 'admin',\n            url: '/health',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Health Checks'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/health/health.html',\n                    controller: 'JhiHealthCheckController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('JhiHealthService', JhiHealthService);\n\n    JhiHealthService.$inject = ['$rootScope', '$http'];\n\n    function JhiHealthService ($rootScope, $http) {\n        var separator = '.';\n        var service = {\n            checkHealth: checkHealth,\n            transformHealthData: transformHealthData,\n            getBaseName: getBaseName,\n            getSubSystemName: getSubSystemName\n        };\n\n        return service;\n\n        function checkHealth () {\n            return $http.get('management/health').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function transformHealthData (data) {\n            var response = [];\n            flattenHealthData(response, null, data);\n            return response;\n        }\n\n        function getBaseName (name) {\n            if (name) {\n                var split = name.split('.');\n                return split[0];\n            }\n        }\n\n        function getSubSystemName (name) {\n            if (name) {\n                var split = name.split('.');\n                split.splice(0, 1);\n                var remainder = split.join('.');\n                return remainder ? ' - ' + remainder : '';\n            }\n        }\n\n        /* private methods */\n        function flattenHealthData (result, path, data) {\n            angular.forEach(data, function (value, key) {\n                if (isHealthObject(value)) {\n                    if (hasSubSystem(value)) {\n                        addHealthObject(result, false, value, getModuleName(path, key));\n                        flattenHealthData(result, getModuleName(path, key), value);\n                    } else {\n                        addHealthObject(result, true, value, getModuleName(path, key));\n                    }\n                }\n            });\n            return result;\n        }\n\n        function addHealthObject (result, isLeaf, healthObject, name) {\n\n            var healthData = {\n                'name': name\n            };\n            var details = {};\n            var hasDetails = false;\n\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status' || key === 'error') {\n                    healthData[key] = value;\n                } else {\n                    if (!isHealthObject(value)) {\n                        details[key] = value;\n                        hasDetails = true;\n                    }\n                }\n            });\n\n            // Add the of the details\n            if (hasDetails) {\n                angular.extend(healthData, { 'details': details});\n            }\n\n            // Only add nodes if they provide additional information\n            if (isLeaf || hasDetails || healthData.error) {\n                result.push(healthData);\n            }\n            return healthData;\n        }\n\n        function getModuleName (path, name) {\n            var result;\n            if (path && name) {\n                result = path + separator + name;\n            }  else if (path) {\n                result = path;\n            } else if (name) {\n                result = name;\n            } else {\n                result = '';\n            }\n            return result;\n        }\n\n        function hasSubSystem (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value) {\n                if (value && value.status) {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n        function isHealthObject (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status') {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular.module('team7App')\n        .controller('HealthModalController', HealthModalController);\n\n    HealthModalController.$inject = ['$uibModalInstance', 'currentHealth', 'baseName', 'subSystemName'];\n\n    function HealthModalController ($uibModalInstance, currentHealth, baseName, subSystemName) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.currentHealth = currentHealth;\n        vm.baseName = baseName;\n        vm.subSystemName = subSystemName;\n\n        function cancel() {\n            $uibModalInstance.dismiss('cancel');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('JhiHealthCheckController', JhiHealthCheckController);\n\n    JhiHealthCheckController.$inject = ['JhiHealthService', '$uibModal'];\n\n    function JhiHealthCheckController (JhiHealthService, $uibModal) {\n        var vm = this;\n\n        vm.updatingHealth = true;\n        vm.getLabelClass = getLabelClass;\n        vm.refresh = refresh;\n        vm.showHealth = showHealth;\n        vm.baseName = JhiHealthService.getBaseName;\n        vm.subSystemName = JhiHealthService.getSubSystemName;\n\n        vm.refresh();\n\n        function getLabelClass (statusState) {\n            if (statusState === 'UP') {\n                return 'label-success';\n            } else {\n                return 'label-danger';\n            }\n        }\n\n        function refresh () {\n            vm.updatingHealth = true;\n            JhiHealthService.checkHealth().then(function (response) {\n                vm.healthData = JhiHealthService.transformHealthData(response);\n                vm.updatingHealth = false;\n            }, function (response) {\n                vm.healthData =  JhiHealthService.transformHealthData(response.data);\n                vm.updatingHealth = false;\n            });\n        }\n\n        function showHealth (health) {\n            $uibModal.open({\n                templateUrl: 'app/admin/health/health.modal.html',\n                controller: 'HealthModalController',\n                controllerAs: 'vm',\n                size: 'lg',\n                resolve: {\n                    currentHealth: function() {\n                        return health;\n                    },\n                    baseName: function() {\n                        return vm.baseName;\n                    },\n                    subSystemName: function() {\n                        return vm.subSystemName;\n                    }\n\n                }\n            });\n        }\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('docs', {\n            parent: 'admin',\n            url: '/docs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'API'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/docs/docs.html'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-configuration', {\n            parent: 'admin',\n            url: '/configuration',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Configuration'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/configuration/configuration.html',\n                    controller: 'JhiConfigurationController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('JhiConfigurationService', JhiConfigurationService);\n\n    JhiConfigurationService.$inject = ['$filter', '$http'];\n\n    function JhiConfigurationService ($filter, $http) {\n        var service = {\n            get: get,\n            getEnv: getEnv\n        };\n\n        return service;\n\n        function get () {\n            return $http.get('management/configprops').then(getConfigPropsComplete);\n\n            function getConfigPropsComplete (response) {\n                var properties = [];\n                angular.forEach(response.data, function (data) {\n                    properties.push(data);\n                });\n                var orderBy = $filter('orderBy');\n                return orderBy(properties, 'prefix');\n            }\n        }\n\n        function getEnv () {\n            return $http.get('management/env').then(getEnvComplete);\n\n            function getEnvComplete (response) {\n                var properties = {};\n                angular.forEach(response.data, function (val,key) {\n                    var vals = [];\n                    angular.forEach(val, function (v,k) {\n                        vals.push({ key:k, val:v });\n                    });\n                    properties[key] = vals;\n                });\n                return properties;\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('JhiConfigurationController', JhiConfigurationController);\n\n    JhiConfigurationController.$inject = ['$filter','JhiConfigurationService'];\n\n    function JhiConfigurationController (filter,JhiConfigurationService) {\n        var vm = this;\n\n        vm.allConfiguration = null;\n        vm.configuration = null;\n\n        JhiConfigurationService.get().then(function(configuration) {\n            vm.configuration = configuration;\n        });\n        JhiConfigurationService.getEnv().then(function (configuration) {\n            vm.allConfiguration = configuration;\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('audits', {\n            parent: 'admin',\n            url: '/audits',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Audits'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/audits/audits.html',\n                    controller: 'AuditsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('AuditsService', AuditsService);\n\n    AuditsService.$inject = ['$resource'];\n\n    function AuditsService ($resource) {\n        var service = $resource('management/jhipster/audits/:id', {}, {\n            'get': {\n                method: 'GET',\n                isArray: true\n            },\n            'query': {\n                method: 'GET',\n                isArray: true,\n                params: {fromDate: null, toDate: null}\n            }\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('AuditsController', AuditsController);\n\n    AuditsController.$inject = ['$filter', 'AuditsService', 'ParseLinks'];\n\n    function AuditsController ($filter, AuditsService, ParseLinks) {\n        var vm = this;\n\n        vm.audits = null;\n        vm.fromDate = null;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.onChangeDate = onChangeDate;\n        vm.page = 1;\n        vm.previousMonth = previousMonth;\n        vm.toDate = null;\n        vm.today = today;\n        vm.totalItems = null;\n\n        vm.today();\n        vm.previousMonth();\n        vm.onChangeDate();\n\n        function onChangeDate () {\n            var dateFormat = 'yyyy-MM-dd';\n            var fromDate = $filter('date')(vm.fromDate, dateFormat);\n            var toDate = $filter('date')(vm.toDate, dateFormat);\n\n            AuditsService.query({page: vm.page -1, size: 20, fromDate: fromDate, toDate: toDate}, function(result, headers){\n                vm.audits = result;\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n            });\n        }\n\n        // Date picker configuration\n        function today () {\n            // Today + 1 day - needed if the current day must be included\n            var today = new Date();\n            vm.toDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\n        }\n\n        function previousMonth () {\n            var fromDate = new Date();\n            if (fromDate.getMonth() === 0) {\n                fromDate = new Date(fromDate.getFullYear() - 1, 11, fromDate.getDate());\n            } else {\n                fromDate = new Date(fromDate.getFullYear(), fromDate.getMonth() - 1, fromDate.getDate());\n            }\n\n            vm.fromDate = fromDate;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.onChangeDate();\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('admin', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('settings', {\n            parent: 'account',\n            url: '/settings',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Settings'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/settings/settings.html',\n                    controller: 'SettingsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('SettingsController', SettingsController);\n\n    SettingsController.$inject = ['Principal', 'Auth'];\n\n    function SettingsController (Principal, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.save = save;\n        vm.settingsAccount = null;\n        vm.success = null;\n\n        /**\n         * Store the \"settings account\" in a separate variable, and not in the shared \"account\" variable.\n         */\n        var copyAccount = function (account) {\n            return {\n                activated: account.activated,\n                email: account.email,\n                firstName: account.firstName,\n                langKey: account.langKey,\n                lastName: account.lastName,\n                login: account.login\n            };\n        };\n\n        Principal.identity().then(function(account) {\n            vm.settingsAccount = copyAccount(account);\n        });\n\n        function save () {\n            Auth.updateAccount(vm.settingsAccount).then(function() {\n                vm.error = null;\n                vm.success = 'OK';\n                Principal.identity(true).then(function(account) {\n                    vm.settingsAccount = copyAccount(account);\n                });\n            }).catch(function() {\n                vm.success = null;\n                vm.error = 'ERROR';\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('sessions', {\n            parent: 'account',\n            url: '/sessions',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Sessions'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/sessions/sessions.html',\n                    controller: 'SessionsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('SessionsController', SessionsController);\n\n    SessionsController.$inject = ['Sessions', 'Principal'];\n\n    function SessionsController (Sessions, Principal) {\n        var vm = this;\n\n        vm.account = null;\n        vm.error = null;\n        vm.invalidate = invalidate;\n        vm.sessions = Sessions.getAll();\n        vm.success = null;\n\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function invalidate (series) {\n            Sessions.delete({series: encodeURIComponent(series)},\n                function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                    vm.sessions = Sessions.getAll();\n                },\n                function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('requestReset', {\n            parent: 'account',\n            url: '/reset/request',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/request/reset.request.html',\n                    controller: 'RequestResetController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('RequestResetController', RequestResetController);\n\n    RequestResetController.$inject = ['$timeout', 'Auth'];\n\n    function RequestResetController ($timeout, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.errorEmailNotExists = null;\n        vm.requestReset = requestReset;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#email').focus();});\n\n        function requestReset () {\n\n            vm.error = null;\n            vm.errorEmailNotExists = null;\n\n            Auth.resetPasswordInit(vm.resetAccount.email).then(function () {\n                vm.success = 'OK';\n            }).catch(function (response) {\n                vm.success = null;\n                if (response.status === 400 && response.data === 'e-mail address not registered') {\n                    vm.errorEmailNotExists = 'ERROR';\n                } else {\n                    vm.error = 'ERROR';\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('finishReset', {\n            parent: 'account',\n            url: '/reset/finish?key',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/finish/reset.finish.html',\n                    controller: 'ResetFinishController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('ResetFinishController', ResetFinishController);\n\n    ResetFinishController.$inject = ['$stateParams', '$timeout', 'Auth', 'LoginService'];\n\n    function ResetFinishController ($stateParams, $timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.keyMissing = angular.isUndefined($stateParams.key);\n        vm.confirmPassword = null;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.finishReset = finishReset;\n        vm.login = LoginService.open;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#password').focus();});\n\n        function finishReset() {\n            vm.doNotMatch = null;\n            vm.error = null;\n            if (vm.resetAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                Auth.resetPasswordFinish({key: $stateParams.key, newPassword: vm.resetAccount.password}).then(function () {\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('register', {\n            parent: 'account',\n            url: '/register',\n            data: {\n                authorities: [],\n                pageTitle: 'Registration'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/register/register.html',\n                    controller: 'RegisterController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('RegisterController', RegisterController);\n\n\n    RegisterController.$inject = [ '$timeout', 'Auth', 'LoginService'];\n\n    function RegisterController ($timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.errorUserExists = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        vm.registerAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#login').focus();});\n\n        function register () {\n            if (vm.registerAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.registerAccount.langKey =  'en' ;\n                vm.doNotMatch = null;\n                vm.error = null;\n                vm.errorUserExists = null;\n                vm.errorEmailExists = null;\n\n                Auth.createAccount(vm.registerAccount).then(function () {\n                    vm.success = 'OK';\n                }).catch(function (response) {\n                    vm.success = null;\n                    if (response.status === 400 && response.data === 'login already in use') {\n                        vm.errorUserExists = 'ERROR';\n                    } else if (response.status === 400 && response.data === 'e-mail address already in use') {\n                        vm.errorEmailExists = 'ERROR';\n                    } else {\n                        vm.error = 'ERROR';\n                    }\n                });\n            }\n        }\n    }\n})();\n","/* globals $ */\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .directive('passwordStrengthBar', passwordStrengthBar);\n\n    function passwordStrengthBar () {\n        var directive = {\n            replace: true,\n            restrict: 'E',\n            template: '<div id=\"strength\">' +\n                '<small>Password strength:</small>' +\n                '<ul id=\"strengthBar\">' +\n                '<li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li>' +\n                '</ul>' +\n                '</div>',\n            scope: {\n                passwordToCheck: '='\n            },\n            link: linkFunc\n        };\n\n        return directive;\n\n        /* private helper methods*/\n\n        function linkFunc(scope, iElement) {\n            var strength = {\n                colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],\n                mesureStrength: function (p) {\n\n                    var _force = 0;\n                    var _regex = /[$-/:-?{-~!\"^_`\\[\\]]/g; // \"\n\n                    var _lowerLetters = /[a-z]+/.test(p);\n                    var _upperLetters = /[A-Z]+/.test(p);\n                    var _numbers = /[0-9]+/.test(p);\n                    var _symbols = _regex.test(p);\n\n                    var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];\n                    var _passedMatches = $.grep(_flags, function (el) {\n                        return el === true;\n                    }).length;\n\n                    _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);\n                    _force += _passedMatches * 10;\n\n                    // penality (short password)\n                    _force = (p.length <= 6) ? Math.min(_force, 10) : _force;\n\n                    // penality (poor variety of characters)\n                    _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;\n                    _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;\n                    _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;\n\n                    return _force;\n\n                },\n                getColor: function (s) {\n\n                    var idx;\n                    if (s <= 10) {\n                        idx = 0;\n                    }\n                    else if (s <= 20) {\n                        idx = 1;\n                    }\n                    else if (s <= 30) {\n                        idx = 2;\n                    }\n                    else if (s <= 40) {\n                        idx = 3;\n                    }\n                    else {\n                        idx = 4;\n                    }\n\n                    return { idx: idx + 1, col: this.colors[idx] };\n                }\n            };\n            scope.$watch('passwordToCheck', function (password) {\n                if (password) {\n                    var c = strength.getColor(strength.mesureStrength(password));\n                    iElement.removeClass('ng-hide');\n                    iElement.find('ul').children('li')\n                        .css({ 'background-color': '#DDD' })\n                        .slice(0, c.idx)\n                        .css({ 'background-color': c.col });\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('password', {\n            parent: 'account',\n            url: '/password',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Password'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/password/password.html',\n                    controller: 'PasswordController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('PasswordController', PasswordController);\n\n    PasswordController.$inject = ['Auth', 'Principal'];\n\n    function PasswordController (Auth, Principal) {\n        var vm = this;\n\n        vm.changePassword = changePassword;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.success = null;\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function changePassword () {\n            if (vm.password !== vm.confirmPassword) {\n                vm.error = null;\n                vm.success = null;\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.doNotMatch = null;\n                Auth.changePassword(vm.password).then(function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('activate', {\n            parent: 'account',\n            url: '/activate?key',\n            data: {\n                authorities: [],\n                pageTitle: 'Activation'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/activate/activate.html',\n                    controller: 'ActivationController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('ActivationController', ActivationController);\n\n    ActivationController.$inject = ['$stateParams', 'Auth', 'LoginService'];\n\n    function ActivationController ($stateParams, Auth, LoginService) {\n        var vm = this;\n\n        Auth.activateAccount({key: $stateParams.key}).then(function () {\n            vm.error = null;\n            vm.success = 'OK';\n        }).catch(function () {\n            vm.success = null;\n            vm.error = 'ERROR';\n        });\n\n        vm.login = LoginService.open;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('account', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('team7App', [\n            'ngStorage', \n            'ngResource',\n            'ngCookies',\n            'ngAria',\n            'ngCacheBuster',\n            'ngFileUpload',\n            'ui.bootstrap',\n            'ui.bootstrap.datetimepicker',\n            'ui.router',\n            'infinite-scroll',\n            // jhipster-needle-angularjs-add-module JHipster will add new module here\n            'angular-loading-bar'\n        ])\n        .run(run);\n\n    run.$inject = ['stateHandler'];\n\n    function run(stateHandler) {\n        stateHandler.initialize();\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('User', User);\n\n    User.$inject = ['$resource'];\n\n    function User ($resource) {\n        var service = $resource('api/users/:login', {}, {\n            'query': {method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'save': { method:'POST' },\n            'update': { method:'PUT' },\n            'delete':{ method:'DELETE'}\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('ProfileService', ProfileService);\n\n    ProfileService.$inject = ['$http'];\n\n    function ProfileService($http) {\n\n        var dataPromise;\n\n        var service = {\n            getProfileInfo : getProfileInfo\n        };\n\n        return service;\n\n        function getProfileInfo() {\n            if (angular.isUndefined(dataPromise)) {\n                dataPromise = $http.get('api/profile-info').then(function(result) {\n                    if (result.data.activeProfiles) {\n                        var response = {};\n                        response.activeProfiles = result.data.activeProfiles;\n                        response.ribbonEnv = result.data.ribbonEnv;\n                        response.inProduction = result.data.activeProfiles.indexOf(\"prod\") !== -1;\n                        response.swaggerEnabled = result.data.activeProfiles.indexOf(\"swagger\") !== -1;\n                        return response;\n                    }\n                });\n            }\n            return dataPromise;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .directive('pageRibbon', pageRibbon);\n\n    pageRibbon.$inject = ['ProfileService', '$rootScope'];\n\n    function pageRibbon(ProfileService, $rootScope) {\n        var directive = {\n            replace : true,\n            restrict : 'AE',\n            template : '<div class=\"ribbon hidden\"><a href=\"\" >{{ribbonEnv}}</a></div>',\n            link : linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            ProfileService.getProfileInfo().then(function(response) {\n                if (response.ribbonEnv) {\n                    scope.ribbonEnv = response.ribbonEnv;\n                    element.addClass(response.ribbonEnv);\n                    element.removeClass('hidden');\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('Sessions', Sessions);\n\n    Sessions.$inject = ['$resource'];\n\n    function Sessions ($resource) {\n        return $resource('api/account/sessions/:series', {}, {\n            'getAll': { method: 'GET', isArray: true}\n        });\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('Register', Register);\n\n    Register.$inject = ['$resource'];\n\n    function Register ($resource) {\n        return $resource('api/register', {}, {});\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('Principal', Principal);\n\n    Principal.$inject = ['$q', 'Account'];\n\n    function Principal ($q, Account) {\n        var _identity,\n            _authenticated = false;\n\n        var service = {\n            authenticate: authenticate,\n            hasAnyAuthority: hasAnyAuthority,\n            hasAuthority: hasAuthority,\n            identity: identity,\n            isAuthenticated: isAuthenticated,\n            isIdentityResolved: isIdentityResolved\n        };\n\n        return service;\n\n        function authenticate (identity) {\n            _identity = identity;\n            _authenticated = identity !== null;\n        }\n\n        function hasAnyAuthority (authorities) {\n            if (!_authenticated || !_identity || !_identity.authorities) {\n                return false;\n            }\n\n            for (var i = 0; i < authorities.length; i++) {\n                if (_identity.authorities.indexOf(authorities[i]) !== -1) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        function hasAuthority (authority) {\n            if (!_authenticated) {\n                return $q.when(false);\n            }\n\n            return this.identity().then(function(_id) {\n                return _id.authorities && _id.authorities.indexOf(authority) !== -1;\n            }, function(){\n                return false;\n            });\n        }\n\n        function identity (force) {\n            var deferred = $q.defer();\n\n            if (force === true) {\n                _identity = undefined;\n            }\n\n            // check and see if we have retrieved the identity data from the server.\n            // if we have, reuse it by immediately resolving\n            if (angular.isDefined(_identity)) {\n                deferred.resolve(_identity);\n\n                return deferred.promise;\n            }\n\n            // retrieve the identity data from the server, update the identity object, and then resolve.\n            Account.get().$promise\n                .then(getAccountThen)\n                .catch(getAccountCatch);\n\n            return deferred.promise;\n\n            function getAccountThen (account) {\n                _identity = account.data;\n                _authenticated = true;\n                deferred.resolve(_identity);\n            }\n\n            function getAccountCatch () {\n                _identity = null;\n                _authenticated = false;\n                deferred.resolve(_identity);\n            }\n        }\n\n        function isAuthenticated () {\n            return _authenticated;\n        }\n\n        function isIdentityResolved () {\n            return angular.isDefined(_identity);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('PasswordResetInit', PasswordResetInit);\n\n    PasswordResetInit.$inject = ['$resource'];\n\n    function PasswordResetInit($resource) {\n        var service = $resource('api/account/reset_password/init', {}, {});\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('PasswordResetFinish', PasswordResetFinish);\n\n    PasswordResetFinish.$inject = ['$resource'];\n\n    function PasswordResetFinish($resource) {\n        var service = $resource('api/account/reset_password/finish', {}, {});\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('Password', Password);\n\n    Password.$inject = ['$resource'];\n\n    function Password($resource) {\n        var service = $resource('api/account/change_password', {}, {});\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .directive('hasAuthority', hasAuthority);\n\n    hasAuthority.$inject = ['Principal'];\n\n    function hasAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authority = attrs.hasAuthority.replace(/\\s+/g, '');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    Principal.hasAuthority(authority)\n                        .then(function (result) {\n                            if (result) {\n                                setVisible();\n                            } else {\n                                setHidden();\n                            }\n                        });\n                };\n\n            if (authority.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .directive('hasAnyAuthority', hasAnyAuthority);\n\n    hasAnyAuthority.$inject = ['Principal'];\n\n    function hasAnyAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n                    var result;\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    result = Principal.hasAnyAuthority(authorities);\n                    if (result) {\n                        setVisible();\n                    } else {\n                        setHidden();\n                    }\n                };\n\n            if (authorities.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('AuthServerProvider', AuthServerProvider);\n\n    AuthServerProvider.$inject = ['$http', '$localStorage' ];\n\n    function AuthServerProvider ($http, $localStorage ) {\n        var service = {\n            getToken: getToken,\n            hasValidToken: hasValidToken,\n            login: login,\n            logout: logout\n        };\n\n        return service;\n\n        function getToken () {\n            var token = $localStorage.authenticationToken;\n            return token;\n        }\n\n        function hasValidToken () {\n            var token = this.getToken();\n            return !!token;\n        }\n\n        function login (credentials) {\n            var data = 'j_username=' + encodeURIComponent(credentials.username) +\n                '&j_password=' + encodeURIComponent(credentials.password) +\n                '&remember-me=' + credentials.rememberMe + '&submit=Login';\n\n            return $http.post('api/authentication', data, {\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }).success(function (response) {\n                return response;\n            });\n        }\n\n        function logout () {\n\n            \n            // logout from the server\n            $http.post('api/logout').success(function (response) {\n                delete $localStorage.authenticationToken;\n                // to get a new csrf token call the api\n                $http.get('api/account');\n                return response;\n            });\n            \n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('Auth', Auth);\n\n    Auth.$inject = ['$rootScope', '$state', '$sessionStorage', '$q', 'Principal', 'AuthServerProvider', 'Account', 'LoginService', 'Register', 'Activate', 'Password', 'PasswordResetInit', 'PasswordResetFinish'];\n\n    function Auth ($rootScope, $state, $sessionStorage, $q, Principal, AuthServerProvider, Account, LoginService, Register, Activate, Password, PasswordResetInit, PasswordResetFinish) {\n        var service = {\n            activateAccount: activateAccount,\n            authorize: authorize,\n            changePassword: changePassword,\n            createAccount: createAccount,\n            getPreviousState: getPreviousState,\n            login: login,\n            logout: logout,\n            resetPasswordFinish: resetPasswordFinish,\n            resetPasswordInit: resetPasswordInit,\n            resetPreviousState: resetPreviousState,\n            storePreviousState: storePreviousState,\n            updateAccount: updateAccount\n        };\n\n        return service;\n\n        function activateAccount (key, callback) {\n            var cb = callback || angular.noop;\n\n            return Activate.get(key,\n                function (response) {\n                    return cb(response);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function authorize (force) {\n            var authReturn = Principal.identity(force).then(authThen);\n\n            return authReturn;\n\n            function authThen () {\n                var isAuthenticated = Principal.isAuthenticated();\n\n                // an authenticated user can't access to login and register pages\n                if (isAuthenticated && $rootScope.toState.parent === 'account' && ($rootScope.toState.name === 'login' || $rootScope.toState.name === 'register')) {\n                    $state.go('home');\n                }\n\n                // recover and clear previousState after external login redirect (e.g. oauth2)\n                if (isAuthenticated && !$rootScope.fromState.name && getPreviousState()) {\n                    var previousState = getPreviousState();\n                    resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n\n                if ($rootScope.toState.data.authorities && $rootScope.toState.data.authorities.length > 0 && !Principal.hasAnyAuthority($rootScope.toState.data.authorities)) {\n                    if (isAuthenticated) {\n                        // user is signed in but not authorized for desired state\n                        $state.go('accessdenied');\n                    }\n                    else {\n                        // user is not authenticated. stow the state they wanted before you\n                        // send them to the login service, so you can return them when you're done\n                        storePreviousState($rootScope.toState.name, $rootScope.toStateParams);\n\n                        // now, send them to the signin state so they can log in\n                        $state.go('accessdenied').then(function() {\n                            LoginService.open();\n                        });\n                    }\n                }\n            }\n        }\n\n        function changePassword (newPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return Password.save(newPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function createAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Register.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    this.logout();\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function login (credentials, callback) {\n            var cb = callback || angular.noop;\n            var deferred = $q.defer();\n\n            AuthServerProvider.login(credentials)\n                .then(loginThen)\n                .catch(function (err) {\n                    this.logout();\n                    deferred.reject(err);\n                    return cb(err);\n                }.bind(this));\n\n            function loginThen (data) {\n                Principal.identity(true).then(function(account) {\n                    deferred.resolve(data);\n                });\n                return cb();\n            }\n\n            return deferred.promise;\n        }\n\n\n        function logout () {\n            AuthServerProvider.logout();\n            Principal.authenticate(null);\n        }\n\n        function resetPasswordFinish (keyAndPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetFinish.save(keyAndPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function resetPasswordInit (mail, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetInit.save(mail, function() {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function updateAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Account.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function getPreviousState() {\n            var previousState = $sessionStorage.previousState;\n            return previousState;\n        }\n\n        function resetPreviousState() {\n            delete $sessionStorage.previousState;\n        }\n\n        function storePreviousState(previousStateName, previousStateParams) {\n            var previousState = { \"name\": previousStateName, \"params\": previousStateParams };\n            $sessionStorage.previousState = previousState;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('Activate', Activate);\n\n    Activate.$inject = ['$resource'];\n\n    function Activate ($resource) {\n        var service = $resource('api/activate', {}, {\n            'get': { method: 'GET', params: {}, isArray: false}\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('Account', Account);\n\n    Account.$inject = ['$resource'];\n\n    function Account ($resource) {\n        var service = $resource('api/account', {}, {\n            'get': { method: 'GET', params: {}, isArray: false,\n                interceptor: {\n                    response: function(response) {\n                        // expose response\n                        return response;\n                    }\n                }\n            }\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('NavbarController', NavbarController);\n\n    NavbarController.$inject = ['$state', 'Auth', 'Principal', 'ProfileService', 'LoginService'];\n\n    function NavbarController ($state, Auth, Principal, ProfileService, LoginService) {\n        var vm = this;\n\n        vm.isNavbarCollapsed = true;\n        vm.isAuthenticated = Principal.isAuthenticated;\n\n        ProfileService.getProfileInfo().then(function(response) {\n            vm.inProduction = response.inProduction;\n            vm.swaggerEnabled = response.swaggerEnabled;\n        });\n\n        vm.login = login;\n        vm.logout = logout;\n        vm.toggleNavbar = toggleNavbar;\n        vm.collapseNavbar = collapseNavbar;\n        vm.$state = $state;\n\n        function login() {\n            collapseNavbar();\n            LoginService.open();\n        }\n\n        function logout() {\n            collapseNavbar();\n            Auth.logout();\n            $state.go('home');\n        }\n\n        function toggleNavbar() {\n            vm.isNavbarCollapsed = !vm.isNavbarCollapsed;\n        }\n\n        function collapseNavbar() {\n            vm.isNavbarCollapsed = true;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .directive('activeLink', activeLink);\n\n    function activeLink() {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var clazz = attrs.activeLink;\n            var path = attrs.href;\n            path = path.substring(1); //hack because path does bot return including hashbang\n            scope.location = location;\n            scope.$watch('location.path()', function(newPath) {\n                if (path === newPath) {\n                    element.addClass(clazz);\n                } else {\n                    element.removeClass(clazz);\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n            .state('error', {\n                parent: 'app',\n                url: '/error',\n                data: {\n                    authorities: [],\n                    pageTitle: 'Error page!'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/error.html'\n                    }\n                }\n            })\n            .state('accessdenied', {\n                parent: 'app',\n                url: '/accessdenied',\n                data: {\n                    authorities: []\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/accessdenied.html'\n                    }\n                }\n            });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('home', {\n            parent: 'app',\n            url: '/',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/home/home.html',\n                    controller: 'HomeController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('HomeController', HomeController);\n\n    HomeController.$inject = ['$scope', 'Principal', 'LoginService', '$state'];\n\n    function HomeController ($scope, Principal, LoginService, $state) {\n        var vm = this;\n\n        vm.account = null;\n        vm.isAuthenticated = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        $scope.$on('authenticationSuccess', function() {\n            getAccount();\n        });\n\n        getAccount();\n\n        function getAccount() {\n            Principal.identity().then(function(account) {\n                vm.account = account;\n                vm.isAuthenticated = Principal.isAuthenticated;\n            });\n        }\n        function register () {\n            $state.go('register');\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('ThresholdDialogController', ThresholdDialogController);\n\n    ThresholdDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Threshold'];\n\n    function ThresholdDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Threshold) {\n        var vm = this;\n\n        vm.threshold = entity;\n        vm.clear = clear;\n        vm.save = save;\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.threshold.id !== null) {\n                Threshold.update(vm.threshold, onSaveSuccess, onSaveError);\n            } else {\n                Threshold.save(vm.threshold, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('team7App:thresholdUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('ThresholdDetailController', ThresholdDetailController);\n\n    ThresholdDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Threshold'];\n\n    function ThresholdDetailController($scope, $rootScope, $stateParams, previousState, entity, Threshold) {\n        var vm = this;\n\n        vm.threshold = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('team7App:thresholdUpdate', function(event, result) {\n            vm.threshold = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('ThresholdDeleteController',ThresholdDeleteController);\n\n    ThresholdDeleteController.$inject = ['$uibModalInstance', 'entity', 'Threshold'];\n\n    function ThresholdDeleteController($uibModalInstance, entity, Threshold) {\n        var vm = this;\n\n        vm.threshold = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n        \n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Threshold.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('threshold', {\n            parent: 'entity',\n            url: '/threshold',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Thresholds'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/threshold/thresholds.html',\n                    controller: 'ThresholdController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('threshold-detail', {\n            parent: 'entity',\n            url: '/threshold/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Threshold'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/threshold/threshold-detail.html',\n                    controller: 'ThresholdDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Threshold', function($stateParams, Threshold) {\n                    return Threshold.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'threshold',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('threshold-detail.edit', {\n            parent: 'threshold-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/threshold/threshold-dialog.html',\n                    controller: 'ThresholdDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Threshold', function(Threshold) {\n                            return Threshold.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('threshold.new', {\n            parent: 'threshold',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/threshold/threshold-dialog.html',\n                    controller: 'ThresholdDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                value: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('threshold', null, { reload: 'threshold' });\n                }, function() {\n                    $state.go('threshold');\n                });\n            }]\n        })\n        .state('threshold.edit', {\n            parent: 'threshold',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/threshold/threshold-dialog.html',\n                    controller: 'ThresholdDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Threshold', function(Threshold) {\n                            return Threshold.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('threshold', null, { reload: 'threshold' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('threshold.delete', {\n            parent: 'threshold',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/threshold/threshold-delete-dialog.html',\n                    controller: 'ThresholdDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Threshold', function(Threshold) {\n                            return Threshold.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('threshold', null, { reload: 'threshold' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('team7App')\n        .factory('Threshold', Threshold);\n\n    Threshold.$inject = ['$resource'];\n\n    function Threshold ($resource) {\n        var resourceUrl =  'api/thresholds/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('ThresholdSearch', ThresholdSearch);\n\n    ThresholdSearch.$inject = ['$resource'];\n\n    function ThresholdSearch($resource) {\n        var resourceUrl =  'api/_search/thresholds/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('ThresholdController', ThresholdController);\n\n    ThresholdController.$inject = ['$scope', '$state', 'Threshold', 'ThresholdSearch'];\n\n    function ThresholdController ($scope, $state, Threshold, ThresholdSearch) {\n        var vm = this;\n        \n        vm.thresholds = [];\n        vm.search = search;\n        vm.loadAll = loadAll;\n\n        loadAll();\n\n        function loadAll() {\n            Threshold.query(function(result) {\n                vm.thresholds = result;\n            });\n        }\n\n        function search () {\n            if (!vm.searchQuery) {\n                return vm.loadAll();\n            }\n            ThresholdSearch.query({query: vm.searchQuery}, function(result) {\n                vm.thresholds = result;\n            });\n        }    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('PadSetDialogController', PadSetDialogController);\n\n    PadSetDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'PadSet', 'EquipmentSet'];\n\n    function PadSetDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, PadSet, EquipmentSet) {\n        var vm = this;\n\n        vm.padSet = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.equipmentsets = EquipmentSet.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.padSet.id !== null) {\n                PadSet.update(vm.padSet, onSaveSuccess, onSaveError);\n            } else {\n                PadSet.save(vm.padSet, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('team7App:padSetUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('PadSetDetailController', PadSetDetailController);\n\n    PadSetDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'PadSet', 'EquipmentSet'];\n\n    function PadSetDetailController($scope, $rootScope, $stateParams, previousState, entity, PadSet, EquipmentSet) {\n        var vm = this;\n\n        vm.padSet = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('team7App:padSetUpdate', function(event, result) {\n            vm.padSet = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('PadSetDeleteController',PadSetDeleteController);\n\n    PadSetDeleteController.$inject = ['$uibModalInstance', 'entity', 'PadSet'];\n\n    function PadSetDeleteController($uibModalInstance, entity, PadSet) {\n        var vm = this;\n\n        vm.padSet = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n        \n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            PadSet.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('pad-set', {\n            parent: 'entity',\n            url: '/pad-set',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'PadSets'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/pad-set/pad-sets.html',\n                    controller: 'PadSetController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('pad-set-detail', {\n            parent: 'entity',\n            url: '/pad-set/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'PadSet'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/pad-set/pad-set-detail.html',\n                    controller: 'PadSetDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'PadSet', function($stateParams, PadSet) {\n                    return PadSet.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'pad-set',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('pad-set-detail.edit', {\n            parent: 'pad-set-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/pad-set/pad-set-dialog.html',\n                    controller: 'PadSetDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['PadSet', function(PadSet) {\n                            return PadSet.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('pad-set.new', {\n            parent: 'pad-set',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/pad-set/pad-set-dialog.html',\n                    controller: 'PadSetDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                name: null,\n                                latitude: null,\n                                longitude: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('pad-set', null, { reload: 'pad-set' });\n                }, function() {\n                    $state.go('pad-set');\n                });\n            }]\n        })\n        .state('pad-set.edit', {\n            parent: 'pad-set',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/pad-set/pad-set-dialog.html',\n                    controller: 'PadSetDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['PadSet', function(PadSet) {\n                            return PadSet.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('pad-set', null, { reload: 'pad-set' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('pad-set.delete', {\n            parent: 'pad-set',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/pad-set/pad-set-delete-dialog.html',\n                    controller: 'PadSetDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['PadSet', function(PadSet) {\n                            return PadSet.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('pad-set', null, { reload: 'pad-set' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('team7App')\n        .factory('PadSet', PadSet);\n\n    PadSet.$inject = ['$resource'];\n\n    function PadSet ($resource) {\n        var resourceUrl =  'api/pad-sets/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('PadSetSearch', PadSetSearch);\n\n    PadSetSearch.$inject = ['$resource'];\n\n    function PadSetSearch($resource) {\n        var resourceUrl =  'api/_search/pad-sets/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('PadSetController', PadSetController);\n\n    PadSetController.$inject = ['$scope', '$state', 'PadSet', 'PadSetSearch'];\n\n    function PadSetController ($scope, $state, PadSet, PadSetSearch) {\n        var vm = this;\n        \n        vm.padSets = [];\n        vm.search = search;\n        vm.loadAll = loadAll;\n\n        loadAll();\n\n        function loadAll() {\n            PadSet.query(function(result) {\n                vm.padSets = result;\n            });\n        }\n\n        function search () {\n            if (!vm.searchQuery) {\n                return vm.loadAll();\n            }\n            PadSetSearch.query({query: vm.searchQuery}, function(result) {\n                vm.padSets = result;\n            });\n        }    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('MetricDialogController', MetricDialogController);\n\n    MetricDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', '$q', 'entity', 'Metric', 'EquipmentSet', 'Threshold'];\n\n    function MetricDialogController ($timeout, $scope, $stateParams, $uibModalInstance, $q, entity, Metric, EquipmentSet, Threshold) {\n        var vm = this;\n\n        vm.metric = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.equipmentsets = EquipmentSet.query();\n        vm.thresholds = Threshold.query({filter: 'metric-is-null'});\n        $q.all([vm.metric.$promise, vm.thresholds.$promise]).then(function() {\n            if (!vm.metric.threshold || !vm.metric.threshold.id) {\n                return $q.reject();\n            }\n            return Threshold.get({id : vm.metric.threshold.id}).$promise;\n        }).then(function(threshold) {\n            vm.thresholds.push(threshold);\n        });\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.metric.id !== null) {\n                Metric.update(vm.metric, onSaveSuccess, onSaveError);\n            } else {\n                Metric.save(vm.metric, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('team7App:metricUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('MetricDetailController', MetricDetailController);\n\n    MetricDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Metric', 'EquipmentSet', 'Threshold'];\n\n    function MetricDetailController($scope, $rootScope, $stateParams, previousState, entity, Metric, EquipmentSet, Threshold) {\n        var vm = this;\n\n        vm.metric = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('team7App:metricUpdate', function(event, result) {\n            vm.metric = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('MetricDeleteController',MetricDeleteController);\n\n    MetricDeleteController.$inject = ['$uibModalInstance', 'entity', 'Metric'];\n\n    function MetricDeleteController($uibModalInstance, entity, Metric) {\n        var vm = this;\n\n        vm.metric = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n        \n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Metric.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('metric', {\n            parent: 'entity',\n            url: '/metric',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Metrics'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/metric/metrics.html',\n                    controller: 'MetricController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('metric-detail', {\n            parent: 'entity',\n            url: '/metric/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Metric'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/metric/metric-detail.html',\n                    controller: 'MetricDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Metric', function($stateParams, Metric) {\n                    return Metric.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'metric',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('metric-detail.edit', {\n            parent: 'metric-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/metric/metric-dialog.html',\n                    controller: 'MetricDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Metric', function(Metric) {\n                            return Metric.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('metric.new', {\n            parent: 'metric',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/metric/metric-dialog.html',\n                    controller: 'MetricDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                name: null,\n                                value: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('metric', null, { reload: 'metric' });\n                }, function() {\n                    $state.go('metric');\n                });\n            }]\n        })\n        .state('metric.edit', {\n            parent: 'metric',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/metric/metric-dialog.html',\n                    controller: 'MetricDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Metric', function(Metric) {\n                            return Metric.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('metric', null, { reload: 'metric' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('metric.delete', {\n            parent: 'metric',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/metric/metric-delete-dialog.html',\n                    controller: 'MetricDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Metric', function(Metric) {\n                            return Metric.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('metric', null, { reload: 'metric' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('team7App')\n        .factory('Metric', Metric);\n\n    Metric.$inject = ['$resource'];\n\n    function Metric ($resource) {\n        var resourceUrl =  'api/metrics/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('MetricSearch', MetricSearch);\n\n    MetricSearch.$inject = ['$resource'];\n\n    function MetricSearch($resource) {\n        var resourceUrl =  'api/_search/metrics/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('MetricController', MetricController);\n\n    MetricController.$inject = ['$scope', '$state', 'Metric', 'MetricSearch'];\n\n    function MetricController ($scope, $state, Metric, MetricSearch) {\n        var vm = this;\n        \n        vm.metrics = [];\n        vm.search = search;\n        vm.loadAll = loadAll;\n\n        loadAll();\n\n        function loadAll() {\n            Metric.query(function(result) {\n                vm.metrics = result;\n            });\n        }\n\n        function search () {\n            if (!vm.searchQuery) {\n                return vm.loadAll();\n            }\n            MetricSearch.query({query: vm.searchQuery}, function(result) {\n                vm.metrics = result;\n            });\n        }    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('EquipmentSetDialogController', EquipmentSetDialogController);\n\n    EquipmentSetDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'EquipmentSet', 'Metric', 'PadSet'];\n\n    function EquipmentSetDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, EquipmentSet, Metric, PadSet) {\n        var vm = this;\n\n        vm.equipmentSet = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.metrics = Metric.query();\n        vm.padsets = PadSet.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.equipmentSet.id !== null) {\n                EquipmentSet.update(vm.equipmentSet, onSaveSuccess, onSaveError);\n            } else {\n                EquipmentSet.save(vm.equipmentSet, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('team7App:equipmentSetUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('EquipmentSetDetailController', EquipmentSetDetailController);\n\n    EquipmentSetDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'EquipmentSet', 'Metric', 'PadSet'];\n\n    function EquipmentSetDetailController($scope, $rootScope, $stateParams, previousState, entity, EquipmentSet, Metric, PadSet) {\n        var vm = this;\n\n        vm.equipmentSet = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('team7App:equipmentSetUpdate', function(event, result) {\n            vm.equipmentSet = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('EquipmentSetDeleteController',EquipmentSetDeleteController);\n\n    EquipmentSetDeleteController.$inject = ['$uibModalInstance', 'entity', 'EquipmentSet'];\n\n    function EquipmentSetDeleteController($uibModalInstance, entity, EquipmentSet) {\n        var vm = this;\n\n        vm.equipmentSet = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n        \n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            EquipmentSet.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('equipment-set', {\n            parent: 'entity',\n            url: '/equipment-set',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'EquipmentSets'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/equipment-set/equipment-sets.html',\n                    controller: 'EquipmentSetController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n            }\n        })\n        .state('equipment-set-detail', {\n            parent: 'entity',\n            url: '/equipment-set/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'EquipmentSet'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/equipment-set/equipment-set-detail.html',\n                    controller: 'EquipmentSetDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'EquipmentSet', function($stateParams, EquipmentSet) {\n                    return EquipmentSet.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'equipment-set',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('equipment-set-detail.edit', {\n            parent: 'equipment-set-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/equipment-set/equipment-set-dialog.html',\n                    controller: 'EquipmentSetDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['EquipmentSet', function(EquipmentSet) {\n                            return EquipmentSet.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('equipment-set.new', {\n            parent: 'equipment-set',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/equipment-set/equipment-set-dialog.html',\n                    controller: 'EquipmentSetDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                name: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('equipment-set', null, { reload: 'equipment-set' });\n                }, function() {\n                    $state.go('equipment-set');\n                });\n            }]\n        })\n        .state('equipment-set.edit', {\n            parent: 'equipment-set',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/equipment-set/equipment-set-dialog.html',\n                    controller: 'EquipmentSetDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['EquipmentSet', function(EquipmentSet) {\n                            return EquipmentSet.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('equipment-set', null, { reload: 'equipment-set' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('equipment-set.delete', {\n            parent: 'equipment-set',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/equipment-set/equipment-set-delete-dialog.html',\n                    controller: 'EquipmentSetDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['EquipmentSet', function(EquipmentSet) {\n                            return EquipmentSet.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('equipment-set', null, { reload: 'equipment-set' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('team7App')\n        .factory('EquipmentSet', EquipmentSet);\n\n    EquipmentSet.$inject = ['$resource'];\n\n    function EquipmentSet ($resource) {\n        var resourceUrl =  'api/equipment-sets/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('EquipmentSetSearch', EquipmentSetSearch);\n\n    EquipmentSetSearch.$inject = ['$resource'];\n\n    function EquipmentSetSearch($resource) {\n        var resourceUrl =  'api/_search/equipment-sets/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('EquipmentSetController', EquipmentSetController);\n\n    EquipmentSetController.$inject = ['$scope', '$state', 'EquipmentSet', 'EquipmentSetSearch'];\n\n    function EquipmentSetController ($scope, $state, EquipmentSet, EquipmentSetSearch) {\n        var vm = this;\n        \n        vm.equipmentSets = [];\n        vm.search = search;\n        vm.loadAll = loadAll;\n\n        loadAll();\n\n        function loadAll() {\n            EquipmentSet.query(function(result) {\n                vm.equipmentSets = result;\n            });\n        }\n\n        function search () {\n            if (!vm.searchQuery) {\n                return vm.loadAll();\n            }\n            EquipmentSetSearch.query({query: vm.searchQuery}, function(result) {\n                vm.equipmentSets = result;\n            });\n        }    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('entity', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .filter('words', words);\n\n    function words() {\n        return wordsFilter;\n\n        function wordsFilter(input, words) {\n            if (isNaN(words)) {\n                return input;\n            }\n            if (words <= 0) {\n                return '';\n            }\n            if (input) {\n                var inputWords = input.split(/\\s+/);\n                if (inputWords.length > words) {\n                    input = inputWords.slice(0, words).join(' ') + '...';\n                }\n            }\n            \n            return input;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .filter('characters', characters);\n        \n    function characters () {\n        return charactersFilter;\n\n        function charactersFilter(input, chars, breakOnWord) {\n            if (isNaN(chars)) {\n                return input;\n            }\n            if (chars <= 0) {\n                return '';\n            }\n            if (input && input.length > chars) {\n                input = input.substring(0, chars);\n\n                if (!breakOnWord) {\n                    var lastspace = input.lastIndexOf(' ');\n                    // Get last space\n                    if (lastspace !== -1) {\n                        input = input.substr(0, lastspace);\n                    }\n                } else {\n                    while (input.charAt(input.length-1) === ' ') {\n                        input = input.substr(0, input.length - 1);\n                    }\n                }\n                return input + '...';\n            }\n            return input;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .directive('jhSortBy', jhSortBy);\n\n    function jhSortBy() {\n        var directive = {\n            restrict: 'A',\n            scope: false,\n            require: '^jhSort',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs, parentCtrl) {\n            element.bind('click', function () {\n                parentCtrl.sort(attrs.jhSortBy);\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .directive('jhSort', jhSort);\n\n    function jhSort () {\n        var directive = {\n            restrict: 'A',\n            scope: {\n                predicate: '=jhSort',\n                ascending: '=',\n                callback: '&'\n            },\n            controller: SortController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n    }\n\n    SortController.$inject = ['$scope', '$element'];\n\n    function SortController ($scope, $element) {\n        var vm = this;\n\n        vm.applyClass = applyClass;\n        vm.resetClasses = resetClasses;\n        vm.sort = sort;\n        vm.triggerApply = triggerApply;\n\n        $scope.$watchGroup(['vm.predicate', 'vm.ascending'], vm.triggerApply);\n        vm.triggerApply();\n\n        function applyClass (element) {\n            var thisIcon = element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt',\n                remove = sortIcon + ' ' + sortDesc,\n                add = sortAsc;\n            if (!vm.ascending) {\n                remove = sortIcon + ' ' + sortAsc;\n                add = sortDesc;\n            }\n            vm.resetClasses();\n            thisIcon.removeClass(remove);\n            thisIcon.addClass(add);\n        }\n\n        function resetClasses () {\n            var allThIcons = $element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt';\n            allThIcons.removeClass(sortAsc + ' ' + sortDesc);\n            allThIcons.addClass(sortIcon);\n        }\n\n        function sort (field) {\n            if (field !== vm.predicate) {\n                vm.ascending = true;\n            } else {\n                vm.ascending = !vm.ascending;\n            }\n            vm.predicate = field;\n            $scope.$apply();\n            vm.callback();\n        }\n\n        function triggerApply (values)  {\n            vm.resetClasses();\n            if (values && values[0] !== '_score') {\n                vm.applyClass($element.find('th[jh-sort-by=\\'' + values[0] + '\\']'));\n            }\n        }\n    }\n})();\n\n(function(){\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('ParseLinks', ParseLinks);\n\n    function ParseLinks () {\n\n        var service = {\n            parse : parse\n        };\n\n        return service;\n\n        function parse(header) {\n            if (header.length === 0) {\n                throw new Error('input must not be of zero length');\n            }\n\n            // Split parts by comma\n            var parts = header.split(',');\n            var links = {};\n            // Parse each part into a named link\n            angular.forEach(parts, function(p) {\n                var section = p.split(';');\n                if (section.length !== 2) {\n                    throw new Error('section could not be split on \";\"');\n                }\n                var url = section[0].replace(/<(.*)>/, '$1').trim();\n                var queryString = {};\n                url.replace(\n                    new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n                    function($0, $1, $2, $3) { queryString[$1] = $3; }\n                );\n                var page = queryString.page;\n                if (angular.isString(page)) {\n                    page = parseInt(page);\n                }\n                var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n                links[name] = page;\n            });\n            return links;\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('PaginationUtil', PaginationUtil);\n\n    function PaginationUtil () {\n\n        var service = {\n            parseAscending : parseAscending,\n            parsePage : parsePage,\n            parsePredicate : parsePredicate\n        };\n\n        return service;\n\n        function parseAscending (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                return sort.split(',').slice(-1)[0] === 'asc';\n            } else {\n                // default to true if no sort defined\n                return true;\n            }\n        }\n\n        // query params are strings, and need to be parsed\n        function parsePage (page) {\n            return parseInt(page);\n        }\n\n        // sort can be in the format `id,asc` or `id`\n        function parsePredicate (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                sortArray.pop();\n            }\n            return sortArray.join(',');\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    var jhiItemCount = {\n        template: '<div class=\"info\">' +\n                    'Showing {{(($ctrl.page - 1) * $ctrl.itemsPerPage) == 0 ? 1 : (($ctrl.page - 1) * $ctrl.itemsPerPage + 1)}} - ' +\n                    '{{($ctrl.page * $ctrl.itemsPerPage) < $ctrl.queryCount ? ($ctrl.page * $ctrl.itemsPerPage) : $ctrl.queryCount}} ' +\n                    'of {{$ctrl.queryCount}} items.' +\n                '</div>',\n        bindings: {\n            page: '<',\n            queryCount: '<total',\n            itemsPerPage: '<'\n        }\n    };\n\n    angular\n        .module('team7App')\n        .component('jhiItemCount', jhiItemCount);\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('DateUtils', DateUtils);\n\n    DateUtils.$inject = ['$filter'];\n\n    function DateUtils ($filter) {\n\n        var service = {\n            convertDateTimeFromServer : convertDateTimeFromServer,\n            convertLocalDateFromServer : convertLocalDateFromServer,\n            convertLocalDateToServer : convertLocalDateToServer,\n            dateformat : dateformat\n        };\n\n        return service;\n\n        function convertDateTimeFromServer (date) {\n            if (date) {\n                return new Date(date);\n            } else {\n                return null;\n            }\n        }\n\n        function convertLocalDateFromServer (date) {\n            if (date) {\n                var dateString = date.split('-');\n                return new Date(dateString[0], dateString[1] - 1, dateString[2]);\n            }\n            return null;\n        }\n\n        function convertLocalDateToServer (date) {\n            if (date) {\n                return $filter('date')(date, 'yyyy-MM-dd');\n            } else {\n                return null;\n            }\n        }\n\n        function dateformat () {\n            return 'yyyy-MM-dd';\n        }\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('DataUtils', DataUtils);\n\n    DataUtils.$inject = ['$window'];\n\n    function DataUtils ($window) {\n\n        var service = {\n            abbreviate: abbreviate,\n            byteSize: byteSize,\n            openFile: openFile,\n            toBase64: toBase64\n        };\n\n        return service;\n\n        function abbreviate (text) {\n            if (!angular.isString(text)) {\n                return '';\n            }\n            if (text.length < 30) {\n                return text;\n            }\n            return text ? (text.substring(0, 15) + '...' + text.slice(-10)) : '';\n        }\n\n        function byteSize (base64String) {\n            if (!angular.isString(base64String)) {\n                return '';\n            }\n\n            function endsWith(suffix, str) {\n                return str.indexOf(suffix, str.length - suffix.length) !== -1;\n            }\n\n            function paddingSize(base64String) {\n                if (endsWith('==', base64String)) {\n                    return 2;\n                }\n                if (endsWith('=', base64String)) {\n                    return 1;\n                }\n                return 0;\n            }\n\n            function size(base64String) {\n                return base64String.length / 4 * 3 - paddingSize(base64String);\n            }\n\n            function formatAsBytes(size) {\n                return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ') + ' bytes';\n            }\n\n            return formatAsBytes(size(base64String));\n        }\n\n        function openFile (type, data) {\n            $window.open('data:' + type + ';base64,' + data, '_blank', 'height=300,width=400');\n        }\n\n        function toBase64 (file, cb) {\n            var fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = function (e) {\n                var base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);\n                cb(base64Data);\n            };\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .filter('capitalize', capitalize);\n\n    function capitalize() {\n        return capitalizeFilter;\n\n        function capitalizeFilter (input) {\n            if (input !== null) {\n                input = input.toLowerCase();\n                input = input.substring(0, 1).toUpperCase() + input.substring(1)\n            }\n            return input;\n        }\n    }\n})();\n\n(function() {\n    /*jshint bitwise: false*/\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('Base64', Base64);\n\n    function Base64 () {\n        var keyStr = 'ABCDEFGHIJKLMNOP' +\n            'QRSTUVWXYZabcdef' +\n            'ghijklmnopqrstuv' +\n            'wxyz0123456789+/' +\n            '=';\n\n        var service = {\n            decode : decode,\n            encode : encode\n        };\n\n        return service;\n\n        function encode (input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            while (i < input.length) {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                output = output +\n                    keyStr.charAt(enc1) +\n                    keyStr.charAt(enc2) +\n                    keyStr.charAt(enc3) +\n                    keyStr.charAt(enc4);\n            }\n\n            return output;\n        }\n\n        function decode (input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n            while (i < input.length) {\n                enc1 = keyStr.indexOf(input.charAt(i++));\n                enc2 = keyStr.indexOf(input.charAt(i++));\n                enc3 = keyStr.indexOf(input.charAt(i++));\n                enc4 = keyStr.indexOf(input.charAt(i++));\n\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 !== 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 !== 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n            }\n\n            return output;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('LoginService', LoginService);\n\n    LoginService.$inject = ['$uibModal'];\n\n    function LoginService ($uibModal) {\n        var service = {\n            open: open\n        };\n\n        var modalInstance = null;\n        var resetModal = function () {\n            modalInstance = null;\n        };\n\n        return service;\n\n        function open () {\n            if (modalInstance !== null) return;\n            modalInstance = $uibModal.open({\n                animation: true,\n                templateUrl: 'app/components/login/login.html',\n                controller: 'LoginController',\n                controllerAs: 'vm'\n            });\n            modalInstance.result.then(\n                resetModal,\n                resetModal\n            );\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('LoginController', LoginController);\n\n    LoginController.$inject = ['$rootScope', '$state', '$timeout', 'Auth', '$uibModalInstance'];\n\n    function LoginController ($rootScope, $state, $timeout, Auth, $uibModalInstance) {\n        var vm = this;\n\n        vm.authenticationError = false;\n        vm.cancel = cancel;\n        vm.credentials = {};\n        vm.login = login;\n        vm.password = null;\n        vm.register = register;\n        vm.rememberMe = true;\n        vm.requestResetPassword = requestResetPassword;\n        vm.username = null;\n\n        $timeout(function (){angular.element('#username').focus();});\n\n        function cancel () {\n            vm.credentials = {\n                username: null,\n                password: null,\n                rememberMe: true\n            };\n            vm.authenticationError = false;\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function login (event) {\n            event.preventDefault();\n            Auth.login({\n                username: vm.username,\n                password: vm.password,\n                rememberMe: vm.rememberMe\n            }).then(function () {\n                vm.authenticationError = false;\n                $uibModalInstance.close();\n                if ($state.current.name === 'register' || $state.current.name === 'activate' ||\n                    $state.current.name === 'finishReset' || $state.current.name === 'requestReset') {\n                    $state.go('home');\n                }\n\n                $rootScope.$broadcast('authenticationSuccess');\n\n                // previousState was set in the authExpiredInterceptor before being redirected to login modal.\n                // since login is succesful, go to stored previousState and clear previousState\n                if (Auth.getPreviousState()) {\n                    var previousState = Auth.getPreviousState();\n                    Auth.resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n            }).catch(function () {\n                vm.authenticationError = true;\n            });\n        }\n\n        function register () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('register');\n        }\n\n        function requestResetPassword () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('requestReset');\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .directive('showValidation', showValidation);\n\n    function showValidation () {\n        var directive = {\n            restrict: 'A',\n            require: 'form',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, formCtrl) {\n            element.find('.form-group').each(function() {\n                var $formGroup = angular.element(this);\n                var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');\n\n                if ($inputs.length > 0) {\n                    $inputs.each(function() {\n                        var $input = angular.element(this);\n                        var inputName = $input.attr('name');\n                        scope.$watch(function() {\n                            return formCtrl[inputName].$invalid && formCtrl[inputName].$dirty;\n                        }, function(isInvalid) {\n                            $formGroup.toggleClass('has-error', isInvalid);\n                        });\n                    });\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .constant('paginationConstants', {\n            'itemsPerPage': 20\n        });\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .directive('minbytes', minbytes);\n\n    function minbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.minbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) >= attrs.minbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .directive('maxbytes', maxbytes);\n\n    function maxbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.maxbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) <= attrs.maxbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    var jhiAlertError = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre>{{ alert.msg }}</pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertErrorController\n    };\n\n    angular\n        .module('team7App')\n        .component('jhiAlertError', jhiAlertError);\n\n    jhiAlertErrorController.$inject = ['$scope', 'AlertService', '$rootScope'];\n\n    function jhiAlertErrorController ($scope, AlertService, $rootScope) {\n        var vm = this;\n\n        vm.alerts = [];\n\n        function addErrorAlert (message, key, data) {\n            vm.alerts.push(\n                AlertService.add(\n                    {\n                        type: 'danger',\n                        msg: message,\n                        timeout: 5000,\n                        toast: AlertService.isToast(),\n                        scoped: true\n                    },\n                    vm.alerts\n                )\n            );\n        }\n\n        var cleanHttpErrorListener = $rootScope.$on('team7App.httpError', function (event, httpResponse) {\n            var i;\n            event.stopPropagation();\n            switch (httpResponse.status) {\n            // connection refused, server not reachable\n            case 0:\n                addErrorAlert('Server not reachable','error.server.not.reachable');\n                break;\n\n            case 400:\n                var errorHeader = httpResponse.headers('X-team7App-error');\n                var entityKey = httpResponse.headers('X-team7App-params');\n                if (errorHeader) {\n                    var entityName = entityKey;\n                    addErrorAlert(errorHeader, errorHeader, {entityName: entityName});\n                } else if (httpResponse.data && httpResponse.data.fieldErrors) {\n                    for (i = 0; i < httpResponse.data.fieldErrors.length; i++) {\n                        var fieldError = httpResponse.data.fieldErrors[i];\n                        // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                        var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                        var fieldName = convertedField.charAt(0).toUpperCase() + convertedField.slice(1);\n                        addErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {fieldName: fieldName});\n                    }\n                } else if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);\n                } else {\n                    addErrorAlert(httpResponse.data);\n                }\n                break;\n\n            case 404:\n                addErrorAlert('Not found','error.url.not.found');\n                break;\n\n            default:\n                if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message);\n                } else {\n                    addErrorAlert(angular.toJson(httpResponse));\n                }\n            }\n        });\n\n        $scope.$on('$destroy', function () {\n            if(angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null){\n                cleanHttpErrorListener();\n                vm.alerts = [];\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .provider('AlertService', AlertService);\n\n    function AlertService () {\n        this.toast = false;\n        /*jshint validthis: true */\n        this.$get = getService;\n\n        this.showAsToast = function(isToast) {\n            this.toast = isToast;\n        };\n\n        getService.$inject = ['$timeout', '$sce'];\n\n        function getService ($timeout, $sce) {\n            var toast = this.toast,\n                alertId = 0, // unique id for each alert. Starts from 0.\n                alerts = [],\n                timeout = 5000; // default timeout\n\n            return {\n                factory: factory,\n                isToast: isToast,\n                add: addAlert,\n                closeAlert: closeAlert,\n                closeAlertByIndex: closeAlertByIndex,\n                clear: clear,\n                get: get,\n                success: success,\n                error: error,\n                info: info,\n                warning : warning\n            };\n\n            function isToast() {\n                return toast;\n            }\n\n            function clear() {\n                alerts = [];\n            }\n\n            function get() {\n                return alerts;\n            }\n\n            function success(msg, params, position) {\n                return this.add({\n                    type: 'success',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function error(msg, params, position) {\n                return this.add({\n                    type: 'danger',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function warning(msg, params, position) {\n                return this.add({\n                    type: 'warning',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function info(msg, params, position) {\n                return this.add({\n                    type: 'info',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function factory(alertOptions) {\n                var alert = {\n                    type: alertOptions.type,\n                    msg: $sce.trustAsHtml(alertOptions.msg),\n                    id: alertOptions.alertId,\n                    timeout: alertOptions.timeout,\n                    toast: alertOptions.toast,\n                    position: alertOptions.position ? alertOptions.position : 'top right',\n                    scoped: alertOptions.scoped,\n                    close: function (alerts) {\n                        return closeAlert(this.id, alerts);\n                    }\n                };\n                if(!alert.scoped) {\n                    alerts.push(alert);\n                }\n                return alert;\n            }\n\n            function addAlert(alertOptions, extAlerts) {\n                alertOptions.alertId = alertId++;\n                var that = this;\n                var alert = this.factory(alertOptions);\n                if (alertOptions.timeout && alertOptions.timeout > 0) {\n                    $timeout(function () {\n                        that.closeAlert(alertOptions.alertId, extAlerts);\n                    }, alertOptions.timeout);\n                }\n                return alert;\n            }\n\n            function closeAlert(id, extAlerts) {\n                var thisAlerts = extAlerts ? extAlerts : alerts;\n                return closeAlertByIndex(thisAlerts.map(function(e) { return e.id; }).indexOf(id), thisAlerts);\n            }\n\n            function closeAlertByIndex(index, thisAlerts) {\n                return thisAlerts.splice(index, 1);\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    var jhiAlert = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre ng-bind-html=\"alert.msg\"></pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertController\n    };\n\n    angular\n        .module('team7App')\n        .component('jhiAlert', jhiAlert);\n\n    jhiAlertController.$inject = ['$scope', 'AlertService'];\n\n    function jhiAlertController($scope, AlertService) {\n        var vm = this;\n\n        vm.alerts = AlertService.get();\n        $scope.$on('$destroy', function () {\n            vm.alerts = [];\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('notificationInterceptor', notificationInterceptor);\n\n    notificationInterceptor.$inject = ['$q', 'AlertService'];\n\n    function notificationInterceptor ($q, AlertService) {\n        var service = {\n            response: response\n        };\n\n        return service;\n\n        function response (response) {\n            var alertKey = response.headers('X-team7App-alert');\n            if (angular.isString(alertKey)) {\n                AlertService.success(alertKey, { param : response.headers('X-team7App-params')});\n            }\n            return response;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('errorHandlerInterceptor', errorHandlerInterceptor);\n\n    errorHandlerInterceptor.$inject = ['$q', '$rootScope'];\n\n    function errorHandlerInterceptor ($q, $rootScope) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError (response) {\n            if (!(response.status === 401 && (response.data === '' || (response.data.path && response.data.path.indexOf('/api/account') === 0 )))) {\n                $rootScope.$emit('team7App.httpError', response);\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('authExpiredInterceptor', authExpiredInterceptor);\n\n    \n    authExpiredInterceptor.$inject = ['$rootScope', '$q', '$injector', '$document'];\n\n    function authExpiredInterceptor($rootScope, $q, $injector, $document) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError(response) {\n            // If we have an unauthorized request we redirect to the login page\n            // Don't do this check on the account API to avoid infinite loop\n            if (response.status === 401 && angular.isDefined(response.data.path) && response.data.path.indexOf('/api/account') === -1) {\n                var Auth = $injector.get('Auth');\n                var to = $rootScope.toState;\n                var params = $rootScope.toStateParams;\n                Auth.logout();\n                if (to.name !== 'accessdenied') {\n                    Auth.storePreviousState(to.name, params);\n                }\n                var LoginService = $injector.get('LoginService');\n                LoginService.open();\n            } else if (response.status === 403 && response.config.method !== 'GET' && getCSRF() === '') {\n                // If the CSRF token expired, then try to get a new CSRF token and retry the old request\n                var $http = $injector.get('$http');\n                return $http.get('/').finally(function() { return afterCSRFRenewed(response); });\n            }\n            return $q.reject(response);\n        }\n\n        function getCSRF() {\n            var doc = $document[0];\n            if (doc) {\n                var name = 'CSRF-TOKEN=';\n                var ca = doc.cookie.split(';');\n                for (var i = 0; i < ca.length; i++) {\n                    var c = ca[i];\n                    while (c.charAt(0) === ' ') {c = c.substring(1);}\n\n                    if (c.indexOf(name) !== -1) {\n                        return c.substring(name.length, c.length);\n                    }\n                }\n            }\n            return '';\n        }\n\n        function afterCSRFRenewed(oldResponse) {\n            if (getCSRF() !== '') {\n                // retry the old request after the new CSRF-TOKEN is obtained\n                var $http = $injector.get('$http');\n                return $http(oldResponse.config);\n            } else {\n                // unlikely get here but reject with the old response any way and avoid infinite loop\n                return $q.reject(oldResponse);\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('stateHandler', stateHandler);\n\n    stateHandler.$inject = ['$rootScope', '$state', '$sessionStorage',  '$window',\n        'Auth', 'Principal', 'VERSION'];\n\n    function stateHandler($rootScope, $state, $sessionStorage,  $window,\n        Auth, Principal, VERSION) {\n        return {\n            initialize: initialize\n        };\n\n        function initialize() {\n            $rootScope.VERSION = VERSION;\n\n            var stateChangeStart = $rootScope.$on('$stateChangeStart', function (event, toState, toStateParams, fromState) {\n                $rootScope.toState = toState;\n                $rootScope.toStateParams = toStateParams;\n                $rootScope.fromState = fromState;\n\n                // Redirect to a state with an external URL (http://stackoverflow.com/a/30221248/1098564)\n                if (toState.external) {\n                    event.preventDefault();\n                    $window.open(toState.url, '_self');\n                }\n\n                if (Principal.isIdentityResolved()) {\n                    Auth.authorize();\n                }\n\n                \n            });\n\n            var stateChangeSuccess = $rootScope.$on('$stateChangeSuccess',  function(event, toState, toParams, fromState, fromParams) {\n                var titleKey = 'team7' ;\n\n                // Set the page title key to the one configured in state or use default one\n                if (toState.data.pageTitle) {\n                    titleKey = toState.data.pageTitle;\n                }\n                $window.document.title = titleKey;\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(stateChangeStart) && stateChangeStart !== null){\n                    stateChangeStart();\n                }\n                if(angular.isDefined(stateChangeSuccess) && stateChangeSuccess !== null){\n                    stateChangeSuccess();\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(paginationConfig);\n\n    paginationConfig.$inject = ['uibPaginationConfig', 'paginationConstants'];\n\n    function paginationConfig(uibPaginationConfig, paginationConstants) {\n        uibPaginationConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPaginationConfig.maxSize = 5;\n        uibPaginationConfig.boundaryLinks = true;\n        uibPaginationConfig.firstText = '«';\n        uibPaginationConfig.previousText = '‹';\n        uibPaginationConfig.nextText = '›';\n        uibPaginationConfig.lastText = '»';\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(pagerConfig);\n\n    pagerConfig.$inject = ['uibPagerConfig', 'paginationConstants'];\n\n    function pagerConfig(uibPagerConfig, paginationConstants) {\n        uibPagerConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPagerConfig.previousText = '«';\n        uibPagerConfig.nextText = '»';\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(localStorageConfig);\n\n    localStorageConfig.$inject = ['$localStorageProvider', '$sessionStorageProvider'];\n\n    function localStorageConfig($localStorageProvider, $sessionStorageProvider) {\n        $localStorageProvider.setKeyPrefix('jhi-');\n        $sessionStorageProvider.setKeyPrefix('jhi-');\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(httpConfig);\n\n    httpConfig.$inject = ['$urlRouterProvider', '$httpProvider', 'httpRequestInterceptorCacheBusterProvider', '$urlMatcherFactoryProvider'];\n\n    function httpConfig($urlRouterProvider, $httpProvider, httpRequestInterceptorCacheBusterProvider, $urlMatcherFactoryProvider) {\n        \n        //enable CSRF\n        $httpProvider.defaults.xsrfCookieName = 'CSRF-TOKEN';\n        $httpProvider.defaults.xsrfHeaderName = 'X-CSRF-TOKEN';\n        \n        //Cache everything except rest api requests\n        httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);\n\n        $urlRouterProvider.otherwise('/');\n\n        $httpProvider.interceptors.push('errorHandlerInterceptor');\n        $httpProvider.interceptors.push('authExpiredInterceptor');\n        $httpProvider.interceptors.push('notificationInterceptor');\n        // jhipster-needle-angularjs-add-interceptor JHipster will add new application http interceptor here\n\n        $urlMatcherFactoryProvider.type('boolean', {\n            name : 'boolean',\n            decode: function(val) { return val === true || val === 'true'; },\n            encode: function(val) { return val ? 1 : 0; },\n            equals: function(a, b) { return this.is(a) && a === b; },\n            is: function(val) { return [true,false,0,1].indexOf(val) >= 0; },\n            pattern: /bool|true|0|1/\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(compileServiceConfig);\n\n    compileServiceConfig.$inject = ['$compileProvider','DEBUG_INFO_ENABLED'];\n\n    function compileServiceConfig($compileProvider,DEBUG_INFO_ENABLED) {\n        // disable debug data on prod profile to improve performance\n        $compileProvider.debugInfoEnabled(DEBUG_INFO_ENABLED);\n        \n        /*\n        If you wish to debug an application with this information\n        then you should open up a debug console in the browser\n        then call this method directly in this console:\n\n\t\tangular.reloadWithDebugInfo();\n\t\t*/\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(alertServiceConfig);\n\n    alertServiceConfig.$inject = ['AlertServiceProvider'];\n\n    function alertServiceConfig(AlertServiceProvider) {\n        // set below to true to make alerts look like toast\n        AlertServiceProvider.showAsToast(false);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('app', {\n            abstract: true,\n            views: {\n                'navbar@': {\n                    templateUrl: 'app/layouts/navbar/navbar.html',\n                    controller: 'NavbarController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                authorize: ['Auth',\n                    function (Auth) {\n                        return Auth.authorize();\n                    }\n                ]\n            }\n        });\n    }\n})();\n\n(function () {\n    'use strict';\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular\n        .module('team7App')\n        .constant('VERSION', \"0.0.1-SNAPSHOT\")\n        .constant('DEBUG_INFO_ENABLED', false)\n;\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('UserManagementDialogController',UserManagementDialogController);\n\n    UserManagementDialogController.$inject = ['$stateParams', '$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDialogController ($stateParams, $uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.clear = clear;\n        vm.languages = null;\n        vm.save = save;\n        vm.user = entity;\n\n\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function onSaveSuccess (result) {\n            vm.isSaving = false;\n            $uibModalInstance.close(result);\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.user.id !== null) {\n                User.update(vm.user, onSaveSuccess, onSaveError);\n            } else {\n                vm.user.langKey = 'en';\n                User.save(vm.user, onSaveSuccess, onSaveError);\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('UserManagementDetailController', UserManagementDetailController);\n\n    UserManagementDetailController.$inject = ['$stateParams', 'User'];\n\n    function UserManagementDetailController ($stateParams, User) {\n        var vm = this;\n\n        vm.load = load;\n        vm.user = {};\n\n        vm.load($stateParams.login);\n\n        function load (login) {\n            User.get({login: login}, function(result) {\n                vm.user = result;\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('UserManagementDeleteController', UserManagementDeleteController);\n\n    UserManagementDeleteController.$inject = ['$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDeleteController ($uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.user = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (login) {\n            User.delete({login: login},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('user-management', {\n            parent: 'admin',\n            url: '/user-management?page&sort',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Users'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management.html',\n                    controller: 'UserManagementController',\n                    controllerAs: 'vm'\n                }\n            },            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                }\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort)\n                    };\n                }]\n            }        })\n        .state('user-management-detail', {\n            parent: 'admin',\n            url: '/user/:login',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'team7'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management-detail.html',\n                    controller: 'UserManagementDetailController',\n                    controllerAs: 'vm'\n                }\n            }\n        })\n        .state('user-management.new', {\n            parent: 'user-management',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                id: null, login: null, firstName: null, lastName: null, email: null,\n                                activated: true, langKey: null, createdBy: null, createdDate: null,\n                                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                                resetKey: null, authorities: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('user-management');\n                });\n            }]\n        })\n        .state('user-management.edit', {\n            parent: 'user-management',\n            url: '/{login}/edit',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('user-management.delete', {\n            parent: 'user-management',\n            url: '/{login}/delete',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-delete-dialog.html',\n                    controller: 'UserManagementDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('UserManagementController', UserManagementController);\n\n    UserManagementController.$inject = ['Principal', 'User', 'ParseLinks', 'AlertService', '$state', 'pagingParams', 'paginationConstants'];\n\n    function UserManagementController(Principal, User, ParseLinks, AlertService, $state, pagingParams, paginationConstants) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.currentAccount = null;\n        vm.languages = null;\n        vm.loadAll = loadAll;\n        vm.setActive = setActive;\n        vm.users = [];\n        vm.page = 1;\n        vm.totalItems = null;\n        vm.clear = clear;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.transition = transition;\n\n        vm.loadAll();\n        \n        Principal.identity().then(function(account) {\n            vm.currentAccount = account;\n        });\n\n        function setActive (user, isActivated) {\n            user.activated = isActivated;\n            User.update(user, function () {\n                vm.loadAll();\n                vm.clear();\n            });\n        }\n\n        function loadAll () {\n            User.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n        }\n\n        function onSuccess(data, headers) {\n            //hide anonymous user from user management: it's a required user for Spring Security\n            for (var i in data) {\n                if (data[i]['login'] === 'anonymoususer') {\n                    data.splice(i, 1);\n                }\n            }\n            vm.links = ParseLinks.parse(headers('link'));\n            vm.totalItems = headers('X-Total-Count');\n            vm.queryCount = vm.totalItems;\n            vm.page = pagingParams.page;\n            vm.users = data;\n        }\n\n        function onError(error) {\n            AlertService.error(error.data.message);\n        }\n\n        function clear () {\n            vm.user = {\n                id: null, login: null, firstName: null, lastName: null, email: null,\n                activated: null, langKey: null, createdBy: null, createdDate: null,\n                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                resetKey: null, authorities: null\n            };\n        }\n\n        function sort () {\n            var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n            if (vm.predicate !== 'id') {\n                result.push('id');\n            }\n            return result;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-metrics', {\n            parent: 'admin',\n            url: '/metrics',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Application Metrics'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/metrics/metrics.html',\n                    controller: 'JhiMetricsMonitoringController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('JhiMetricsService', JhiMetricsService);\n\n    JhiMetricsService.$inject = ['$rootScope', '$http'];\n\n    function JhiMetricsService ($rootScope, $http) {\n        var service = {\n            getMetrics: getMetrics,\n            threadDump: threadDump\n        };\n\n        return service;\n\n        function getMetrics () {\n            return $http.get('management/jhipster/metrics').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function threadDump () {\n            return $http.get('management/dump').then(function (response) {\n                return response.data;\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('JhiMetricsMonitoringModalController', JhiMetricsMonitoringModalController);\n\n    JhiMetricsMonitoringModalController.$inject = ['$uibModalInstance', 'threadDump'];\n\n    function JhiMetricsMonitoringModalController ($uibModalInstance, threadDump) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.getLabelClass = getLabelClass;\n        vm.threadDump = threadDump;\n        vm.threadDumpAll = 0;\n        vm.threadDumpBlocked = 0;\n        vm.threadDumpRunnable = 0;\n        vm.threadDumpTimedWaiting = 0;\n        vm.threadDumpWaiting = 0;\n\n        angular.forEach(threadDump, function(value) {\n            if (value.threadState === 'RUNNABLE') {\n                vm.threadDumpRunnable += 1;\n            } else if (value.threadState === 'WAITING') {\n                vm.threadDumpWaiting += 1;\n            } else if (value.threadState === 'TIMED_WAITING') {\n                vm.threadDumpTimedWaiting += 1;\n            } else if (value.threadState === 'BLOCKED') {\n                vm.threadDumpBlocked += 1;\n            }\n        });\n\n        vm.threadDumpAll = vm.threadDumpRunnable + vm.threadDumpWaiting +\n            vm.threadDumpTimedWaiting + vm.threadDumpBlocked;\n\n        function cancel () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function getLabelClass (threadState) {\n            if (threadState === 'RUNNABLE') {\n                return 'label-success';\n            } else if (threadState === 'WAITING') {\n                return 'label-info';\n            } else if (threadState === 'TIMED_WAITING') {\n                return 'label-warning';\n            } else if (threadState === 'BLOCKED') {\n                return 'label-danger';\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('JhiMetricsMonitoringController', JhiMetricsMonitoringController);\n\n    JhiMetricsMonitoringController.$inject = ['$scope','JhiMetricsService', '$uibModal'];\n\n    function JhiMetricsMonitoringController ($scope, JhiMetricsService, $uibModal) {\n        var vm = this;\n\n        vm.cachesStats = {};\n        vm.metrics = {};\n        vm.refresh = refresh;\n        vm.refreshThreadDumpData = refreshThreadDumpData;\n        vm.servicesStats = {};\n        vm.updatingMetrics = true;\n\n        vm.refresh();\n\n        $scope.$watch('vm.metrics', function (newValue) {\n            vm.servicesStats = {};\n            vm.cachesStats = {};\n            angular.forEach(newValue.timers, function (value, key) {\n                if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {\n                    vm.servicesStats[key] = value;\n                }\n                if (key.indexOf('net.sf.ehcache.Cache') !== -1) {\n                    // remove gets or puts\n                    var index = key.lastIndexOf('.');\n                    var newKey = key.substr(0, index);\n\n                    // Keep the name of the domain\n                    vm.cachesStats[newKey] = {\n                        'name': newKey,\n                        'value': value\n                    };\n                }\n            });\n        });\n\n        function refresh () {\n            vm.updatingMetrics = true;\n            JhiMetricsService.getMetrics().then(function (promise) {\n                vm.metrics = promise;\n                vm.updatingMetrics = false;\n            }, function (promise) {\n                vm.metrics = promise.data;\n                vm.updatingMetrics = false;\n            });\n        }\n\n        function refreshThreadDumpData () {\n            JhiMetricsService.threadDump().then(function(data) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/metrics/metrics.modal.html',\n                    controller: 'JhiMetricsMonitoringModalController',\n                    controllerAs: 'vm',\n                    size: 'lg',\n                    resolve: {\n                        threadDump: function() {\n                            return data;\n                        }\n\n                    }\n                });\n            });\n        }\n\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('logs', {\n            parent: 'admin',\n            url: '/logs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Logs'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/logs/logs.html',\n                    controller: 'LogsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('LogsService', LogsService);\n\n    LogsService.$inject = ['$resource'];\n\n    function LogsService ($resource) {\n        var service = $resource('management/jhipster/logs', {}, {\n            'findAll': { method: 'GET', isArray: true},\n            'changeLevel': { method: 'PUT'}\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('LogsController', LogsController);\n\n    LogsController.$inject = ['LogsService'];\n\n    function LogsController (LogsService) {\n        var vm = this;\n\n        vm.changeLevel = changeLevel;\n        vm.loggers = LogsService.findAll();\n\n        function changeLevel (name, level) {\n            LogsService.changeLevel({name: name, level: level}, function () {\n                vm.loggers = LogsService.findAll();\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-health', {\n            parent: 'admin',\n            url: '/health',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Health Checks'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/health/health.html',\n                    controller: 'JhiHealthCheckController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('JhiHealthService', JhiHealthService);\n\n    JhiHealthService.$inject = ['$rootScope', '$http'];\n\n    function JhiHealthService ($rootScope, $http) {\n        var separator = '.';\n        var service = {\n            checkHealth: checkHealth,\n            transformHealthData: transformHealthData,\n            getBaseName: getBaseName,\n            getSubSystemName: getSubSystemName\n        };\n\n        return service;\n\n        function checkHealth () {\n            return $http.get('management/health').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function transformHealthData (data) {\n            var response = [];\n            flattenHealthData(response, null, data);\n            return response;\n        }\n\n        function getBaseName (name) {\n            if (name) {\n                var split = name.split('.');\n                return split[0];\n            }\n        }\n\n        function getSubSystemName (name) {\n            if (name) {\n                var split = name.split('.');\n                split.splice(0, 1);\n                var remainder = split.join('.');\n                return remainder ? ' - ' + remainder : '';\n            }\n        }\n\n        /* private methods */\n        function flattenHealthData (result, path, data) {\n            angular.forEach(data, function (value, key) {\n                if (isHealthObject(value)) {\n                    if (hasSubSystem(value)) {\n                        addHealthObject(result, false, value, getModuleName(path, key));\n                        flattenHealthData(result, getModuleName(path, key), value);\n                    } else {\n                        addHealthObject(result, true, value, getModuleName(path, key));\n                    }\n                }\n            });\n            return result;\n        }\n\n        function addHealthObject (result, isLeaf, healthObject, name) {\n\n            var healthData = {\n                'name': name\n            };\n            var details = {};\n            var hasDetails = false;\n\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status' || key === 'error') {\n                    healthData[key] = value;\n                } else {\n                    if (!isHealthObject(value)) {\n                        details[key] = value;\n                        hasDetails = true;\n                    }\n                }\n            });\n\n            // Add the of the details\n            if (hasDetails) {\n                angular.extend(healthData, { 'details': details});\n            }\n\n            // Only add nodes if they provide additional information\n            if (isLeaf || hasDetails || healthData.error) {\n                result.push(healthData);\n            }\n            return healthData;\n        }\n\n        function getModuleName (path, name) {\n            var result;\n            if (path && name) {\n                result = path + separator + name;\n            }  else if (path) {\n                result = path;\n            } else if (name) {\n                result = name;\n            } else {\n                result = '';\n            }\n            return result;\n        }\n\n        function hasSubSystem (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value) {\n                if (value && value.status) {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n        function isHealthObject (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status') {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular.module('team7App')\n        .controller('HealthModalController', HealthModalController);\n\n    HealthModalController.$inject = ['$uibModalInstance', 'currentHealth', 'baseName', 'subSystemName'];\n\n    function HealthModalController ($uibModalInstance, currentHealth, baseName, subSystemName) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.currentHealth = currentHealth;\n        vm.baseName = baseName;\n        vm.subSystemName = subSystemName;\n\n        function cancel() {\n            $uibModalInstance.dismiss('cancel');\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('JhiHealthCheckController', JhiHealthCheckController);\n\n    JhiHealthCheckController.$inject = ['JhiHealthService', '$uibModal'];\n\n    function JhiHealthCheckController (JhiHealthService, $uibModal) {\n        var vm = this;\n\n        vm.updatingHealth = true;\n        vm.getLabelClass = getLabelClass;\n        vm.refresh = refresh;\n        vm.showHealth = showHealth;\n        vm.baseName = JhiHealthService.getBaseName;\n        vm.subSystemName = JhiHealthService.getSubSystemName;\n\n        vm.refresh();\n\n        function getLabelClass (statusState) {\n            if (statusState === 'UP') {\n                return 'label-success';\n            } else {\n                return 'label-danger';\n            }\n        }\n\n        function refresh () {\n            vm.updatingHealth = true;\n            JhiHealthService.checkHealth().then(function (response) {\n                vm.healthData = JhiHealthService.transformHealthData(response);\n                vm.updatingHealth = false;\n            }, function (response) {\n                vm.healthData =  JhiHealthService.transformHealthData(response.data);\n                vm.updatingHealth = false;\n            });\n        }\n\n        function showHealth (health) {\n            $uibModal.open({\n                templateUrl: 'app/admin/health/health.modal.html',\n                controller: 'HealthModalController',\n                controllerAs: 'vm',\n                size: 'lg',\n                resolve: {\n                    currentHealth: function() {\n                        return health;\n                    },\n                    baseName: function() {\n                        return vm.baseName;\n                    },\n                    subSystemName: function() {\n                        return vm.subSystemName;\n                    }\n\n                }\n            });\n        }\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('docs', {\n            parent: 'admin',\n            url: '/docs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'API'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/docs/docs.html'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-configuration', {\n            parent: 'admin',\n            url: '/configuration',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Configuration'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/configuration/configuration.html',\n                    controller: 'JhiConfigurationController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('JhiConfigurationService', JhiConfigurationService);\n\n    JhiConfigurationService.$inject = ['$filter', '$http'];\n\n    function JhiConfigurationService ($filter, $http) {\n        var service = {\n            get: get,\n            getEnv: getEnv\n        };\n\n        return service;\n\n        function get () {\n            return $http.get('management/configprops').then(getConfigPropsComplete);\n\n            function getConfigPropsComplete (response) {\n                var properties = [];\n                angular.forEach(response.data, function (data) {\n                    properties.push(data);\n                });\n                var orderBy = $filter('orderBy');\n                return orderBy(properties, 'prefix');\n            }\n        }\n\n        function getEnv () {\n            return $http.get('management/env').then(getEnvComplete);\n\n            function getEnvComplete (response) {\n                var properties = {};\n                angular.forEach(response.data, function (val,key) {\n                    var vals = [];\n                    angular.forEach(val, function (v,k) {\n                        vals.push({ key:k, val:v });\n                    });\n                    properties[key] = vals;\n                });\n                return properties;\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('JhiConfigurationController', JhiConfigurationController);\n\n    JhiConfigurationController.$inject = ['$filter','JhiConfigurationService'];\n\n    function JhiConfigurationController (filter,JhiConfigurationService) {\n        var vm = this;\n\n        vm.allConfiguration = null;\n        vm.configuration = null;\n\n        JhiConfigurationService.get().then(function(configuration) {\n            vm.configuration = configuration;\n        });\n        JhiConfigurationService.getEnv().then(function (configuration) {\n            vm.allConfiguration = configuration;\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('audits', {\n            parent: 'admin',\n            url: '/audits',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Audits'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/audits/audits.html',\n                    controller: 'AuditsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .factory('AuditsService', AuditsService);\n\n    AuditsService.$inject = ['$resource'];\n\n    function AuditsService ($resource) {\n        var service = $resource('management/jhipster/audits/:id', {}, {\n            'get': {\n                method: 'GET',\n                isArray: true\n            },\n            'query': {\n                method: 'GET',\n                isArray: true,\n                params: {fromDate: null, toDate: null}\n            }\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('AuditsController', AuditsController);\n\n    AuditsController.$inject = ['$filter', 'AuditsService', 'ParseLinks'];\n\n    function AuditsController ($filter, AuditsService, ParseLinks) {\n        var vm = this;\n\n        vm.audits = null;\n        vm.fromDate = null;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.onChangeDate = onChangeDate;\n        vm.page = 1;\n        vm.previousMonth = previousMonth;\n        vm.toDate = null;\n        vm.today = today;\n        vm.totalItems = null;\n\n        vm.today();\n        vm.previousMonth();\n        vm.onChangeDate();\n\n        function onChangeDate () {\n            var dateFormat = 'yyyy-MM-dd';\n            var fromDate = $filter('date')(vm.fromDate, dateFormat);\n            var toDate = $filter('date')(vm.toDate, dateFormat);\n\n            AuditsService.query({page: vm.page -1, size: 20, fromDate: fromDate, toDate: toDate}, function(result, headers){\n                vm.audits = result;\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n            });\n        }\n\n        // Date picker configuration\n        function today () {\n            // Today + 1 day - needed if the current day must be included\n            var today = new Date();\n            vm.toDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\n        }\n\n        function previousMonth () {\n            var fromDate = new Date();\n            if (fromDate.getMonth() === 0) {\n                fromDate = new Date(fromDate.getFullYear() - 1, 11, fromDate.getDate());\n            } else {\n                fromDate = new Date(fromDate.getFullYear(), fromDate.getMonth() - 1, fromDate.getDate());\n            }\n\n            vm.fromDate = fromDate;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.onChangeDate();\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('admin', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('settings', {\n            parent: 'account',\n            url: '/settings',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Settings'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/settings/settings.html',\n                    controller: 'SettingsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('SettingsController', SettingsController);\n\n    SettingsController.$inject = ['Principal', 'Auth'];\n\n    function SettingsController (Principal, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.save = save;\n        vm.settingsAccount = null;\n        vm.success = null;\n\n        /**\n         * Store the \"settings account\" in a separate variable, and not in the shared \"account\" variable.\n         */\n        var copyAccount = function (account) {\n            return {\n                activated: account.activated,\n                email: account.email,\n                firstName: account.firstName,\n                langKey: account.langKey,\n                lastName: account.lastName,\n                login: account.login\n            };\n        };\n\n        Principal.identity().then(function(account) {\n            vm.settingsAccount = copyAccount(account);\n        });\n\n        function save () {\n            Auth.updateAccount(vm.settingsAccount).then(function() {\n                vm.error = null;\n                vm.success = 'OK';\n                Principal.identity(true).then(function(account) {\n                    vm.settingsAccount = copyAccount(account);\n                });\n            }).catch(function() {\n                vm.success = null;\n                vm.error = 'ERROR';\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('sessions', {\n            parent: 'account',\n            url: '/sessions',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Sessions'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/sessions/sessions.html',\n                    controller: 'SessionsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('SessionsController', SessionsController);\n\n    SessionsController.$inject = ['Sessions', 'Principal'];\n\n    function SessionsController (Sessions, Principal) {\n        var vm = this;\n\n        vm.account = null;\n        vm.error = null;\n        vm.invalidate = invalidate;\n        vm.sessions = Sessions.getAll();\n        vm.success = null;\n\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function invalidate (series) {\n            Sessions.delete({series: encodeURIComponent(series)},\n                function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                    vm.sessions = Sessions.getAll();\n                },\n                function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('requestReset', {\n            parent: 'account',\n            url: '/reset/request',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/request/reset.request.html',\n                    controller: 'RequestResetController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('RequestResetController', RequestResetController);\n\n    RequestResetController.$inject = ['$timeout', 'Auth'];\n\n    function RequestResetController ($timeout, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.errorEmailNotExists = null;\n        vm.requestReset = requestReset;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#email').focus();});\n\n        function requestReset () {\n\n            vm.error = null;\n            vm.errorEmailNotExists = null;\n\n            Auth.resetPasswordInit(vm.resetAccount.email).then(function () {\n                vm.success = 'OK';\n            }).catch(function (response) {\n                vm.success = null;\n                if (response.status === 400 && response.data === 'e-mail address not registered') {\n                    vm.errorEmailNotExists = 'ERROR';\n                } else {\n                    vm.error = 'ERROR';\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('finishReset', {\n            parent: 'account',\n            url: '/reset/finish?key',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/finish/reset.finish.html',\n                    controller: 'ResetFinishController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('ResetFinishController', ResetFinishController);\n\n    ResetFinishController.$inject = ['$stateParams', '$timeout', 'Auth', 'LoginService'];\n\n    function ResetFinishController ($stateParams, $timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.keyMissing = angular.isUndefined($stateParams.key);\n        vm.confirmPassword = null;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.finishReset = finishReset;\n        vm.login = LoginService.open;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#password').focus();});\n\n        function finishReset() {\n            vm.doNotMatch = null;\n            vm.error = null;\n            if (vm.resetAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                Auth.resetPasswordFinish({key: $stateParams.key, newPassword: vm.resetAccount.password}).then(function () {\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('register', {\n            parent: 'account',\n            url: '/register',\n            data: {\n                authorities: [],\n                pageTitle: 'Registration'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/register/register.html',\n                    controller: 'RegisterController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('RegisterController', RegisterController);\n\n\n    RegisterController.$inject = [ '$timeout', 'Auth', 'LoginService'];\n\n    function RegisterController ($timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.errorUserExists = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        vm.registerAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#login').focus();});\n\n        function register () {\n            if (vm.registerAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.registerAccount.langKey =  'en' ;\n                vm.doNotMatch = null;\n                vm.error = null;\n                vm.errorUserExists = null;\n                vm.errorEmailExists = null;\n\n                Auth.createAccount(vm.registerAccount).then(function () {\n                    vm.success = 'OK';\n                }).catch(function (response) {\n                    vm.success = null;\n                    if (response.status === 400 && response.data === 'login already in use') {\n                        vm.errorUserExists = 'ERROR';\n                    } else if (response.status === 400 && response.data === 'e-mail address already in use') {\n                        vm.errorEmailExists = 'ERROR';\n                    } else {\n                        vm.error = 'ERROR';\n                    }\n                });\n            }\n        }\n    }\n})();\n\n/* globals $ */\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .directive('passwordStrengthBar', passwordStrengthBar);\n\n    function passwordStrengthBar () {\n        var directive = {\n            replace: true,\n            restrict: 'E',\n            template: '<div id=\"strength\">' +\n                '<small>Password strength:</small>' +\n                '<ul id=\"strengthBar\">' +\n                '<li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li>' +\n                '</ul>' +\n                '</div>',\n            scope: {\n                passwordToCheck: '='\n            },\n            link: linkFunc\n        };\n\n        return directive;\n\n        /* private helper methods*/\n\n        function linkFunc(scope, iElement) {\n            var strength = {\n                colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],\n                mesureStrength: function (p) {\n\n                    var _force = 0;\n                    var _regex = /[$-/:-?{-~!\"^_`\\[\\]]/g; // \"\n\n                    var _lowerLetters = /[a-z]+/.test(p);\n                    var _upperLetters = /[A-Z]+/.test(p);\n                    var _numbers = /[0-9]+/.test(p);\n                    var _symbols = _regex.test(p);\n\n                    var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];\n                    var _passedMatches = $.grep(_flags, function (el) {\n                        return el === true;\n                    }).length;\n\n                    _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);\n                    _force += _passedMatches * 10;\n\n                    // penality (short password)\n                    _force = (p.length <= 6) ? Math.min(_force, 10) : _force;\n\n                    // penality (poor variety of characters)\n                    _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;\n                    _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;\n                    _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;\n\n                    return _force;\n\n                },\n                getColor: function (s) {\n\n                    var idx;\n                    if (s <= 10) {\n                        idx = 0;\n                    }\n                    else if (s <= 20) {\n                        idx = 1;\n                    }\n                    else if (s <= 30) {\n                        idx = 2;\n                    }\n                    else if (s <= 40) {\n                        idx = 3;\n                    }\n                    else {\n                        idx = 4;\n                    }\n\n                    return { idx: idx + 1, col: this.colors[idx] };\n                }\n            };\n            scope.$watch('passwordToCheck', function (password) {\n                if (password) {\n                    var c = strength.getColor(strength.mesureStrength(password));\n                    iElement.removeClass('ng-hide');\n                    iElement.find('ul').children('li')\n                        .css({ 'background-color': '#DDD' })\n                        .slice(0, c.idx)\n                        .css({ 'background-color': c.col });\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('password', {\n            parent: 'account',\n            url: '/password',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Password'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/password/password.html',\n                    controller: 'PasswordController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('PasswordController', PasswordController);\n\n    PasswordController.$inject = ['Auth', 'Principal'];\n\n    function PasswordController (Auth, Principal) {\n        var vm = this;\n\n        vm.changePassword = changePassword;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.success = null;\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function changePassword () {\n            if (vm.password !== vm.confirmPassword) {\n                vm.error = null;\n                vm.success = null;\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.doNotMatch = null;\n                Auth.changePassword(vm.password).then(function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('activate', {\n            parent: 'account',\n            url: '/activate?key',\n            data: {\n                authorities: [],\n                pageTitle: 'Activation'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/activate/activate.html',\n                    controller: 'ActivationController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .controller('ActivationController', ActivationController);\n\n    ActivationController.$inject = ['$stateParams', 'Auth', 'LoginService'];\n\n    function ActivationController ($stateParams, Auth, LoginService) {\n        var vm = this;\n\n        Auth.activateAccount({key: $stateParams.key}).then(function () {\n            vm.error = null;\n            vm.success = 'OK';\n        }).catch(function () {\n            vm.success = null;\n            vm.error = 'ERROR';\n        });\n\n        vm.login = LoginService.open;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('team7App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('account', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n(function(){angular.module('team7App').run(['$templateCache', function($templateCache) {$templateCache.put('app/home/home.html','<div ng-cloak><div class=\"row\"><div class=\"col-md-4\"><span class=\"hipster img-responsive img-rounded\"></span></div><div class=\"col-md-8\"><h1>Welcome, Java Hipster!</h1><p class=\"lead\">This is your homepage</p><div ng-switch=\"vm.isAuthenticated()\"><div class=\"alert alert-success\" ng-switch-when=\"true\">You are logged in as user \"{{vm.account.login}}\".</div><div class=\"alert alert-warning\" ng-switch-when=\"false\">If you want to <a class=\"alert-link\" href=\"\" ng-click=\"vm.login()\">sign in</a>, you can try the default accounts:<br>- Administrator (login=\"admin\" and password=\"admin\")<br>- User (login=\"user\" and password=\"user\").</div><div class=\"alert alert-warning\" ng-switch-when=\"false\">You don\\'t have an account yet? <a class=\"alert-link\" ui-sref=\"register\">Register a new account</a></div></div><p>If you have any question on JHipster:</p><ul><li><a href=\"http://jhipster.github.io/\" target=\"_blank\">JHipster homepage</a></li><li><a href=\"http://stackoverflow.com/tags/jhipster/info\" target=\"_blank\">JHipster on Stack Overflow</a></li><li><a href=\"https://github.com/jhipster/generator-jhipster/issues?state=open\" target=\"_blank\">JHipster bug tracker</a></li><li><a href=\"https://gitter.im/jhipster/generator-jhipster\" target=\"_blank\">JHipster public chat room</a></li><li><a href=\"https://twitter.com/java_hipster\" target=\"_blank\">follow @java_hipster on Twitter</a></li></ul><p><span>If you like JHipster, don\\'t forget to give us a star on </span>&nbsp;<a href=\"https://github.com/jhipster/generator-jhipster\" target=\"_blank\">Github</a>!</p></div></div></div>');\n$templateCache.put('app/account/activate/activate.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h1>Activation</h1><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>Your user has been activated.</strong> Please <a class=\"alert-link\" href=\"\" ng-click=\"vm.login()\">sign in</a>.</div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><strong>Your user could not be activated.</strong> Please use the registration form to sign up.</div></div></div></div>');\n$templateCache.put('app/account/password/password.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h2>Password for [<b>{{vm.account.login}}</b>]</h2><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>Password changed!</strong></div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><strong>An error has occurred!</strong> The password could not be changed.</div><div class=\"alert alert-danger\" ng-show=\"vm.doNotMatch\">The password and its confirmation do not match!</div><form name=\"form\" role=\"form\" novalidate ng-submit=\"vm.changePassword()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"password\">New password</label><input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"New password\" ng-model=\"vm.password\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.password.$dirty && form.password.$invalid\"><p class=\"help-block\" ng-show=\"form.password.$error.required\">Your password is required.</p><p class=\"help-block\" ng-show=\"form.password.$error.minlength\">Your password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.password.$error.maxlength\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\"vm.password\"></password-strength-bar></div><div class=\"form-group\"><label class=\"control-label\" for=\"confirmPassword\">New password confirmation</label><input type=\"password\" class=\"form-control\" id=\"confirmPassword\" name=\"confirmPassword\" placeholder=\"Confirm the new password\" ng-model=\"vm.confirmPassword\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\"><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.required\">Your confirmation password is required.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.minlength\">Your confirmation password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.maxlength\">Your confirmation password cannot be longer than 50 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\">Save</button></form></div></div></div>');\n$templateCache.put('app/account/register/register.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h1>Registration</h1><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>Registration saved!</strong> Please check your email for confirmation.</div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><strong>Registration failed!</strong> Please try again later.</div><div class=\"alert alert-danger\" ng-show=\"vm.errorUserExists\"><strong>Login name already registered!</strong> Please choose another one.</div><div class=\"alert alert-danger\" ng-show=\"vm.errorEmailExists\"><strong>E-mail is already in use!</strong> Please choose another one.</div><div class=\"alert alert-danger\" ng-show=\"vm.doNotMatch\">The password and its confirmation do not match!</div></div><div class=\"col-md-8 col-md-offset-2\"><form ng-show=\"!vm.success\" name=\"form\" role=\"form\" novalidate ng-submit=\"vm.register()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"login\">Username</label><input type=\"text\" class=\"form-control\" id=\"login\" name=\"login\" placeholder=\"Your username\" ng-model=\"vm.registerAccount.login\" ng-minlength=\"1\" ng-maxlength=\"50\" ng-pattern=\"/^[_\\'.@A-Za-z0-9-]*$/\" required><div ng-show=\"form.login.$dirty && form.login.$invalid\"><p class=\"help-block\" ng-show=\"form.login.$error.required\">Your username is required.</p><p class=\"help-block\" ng-show=\"form.login.$error.minlength\">Your username is required to be at least 1 character.</p><p class=\"help-block\" ng-show=\"form.login.$error.maxlength\">Your username cannot be longer than 50 characters.</p><p class=\"help-block\" ng-show=\"form.login.$error.pattern\">Your username can only contain lower-case letters and digits.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"email\">E-mail</label><input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"Your e-mail\" ng-model=\"vm.registerAccount.email\" ng-minlength=\"5\" ng-maxlength=\"100\" required><div ng-show=\"form.email.$dirty && form.email.$invalid\"><p class=\"help-block\" ng-show=\"form.email.$error.required\">Your e-mail is required.</p><p class=\"help-block\" ng-show=\"form.email.$error.email\">Your e-mail is invalid.</p><p class=\"help-block\" ng-show=\"form.email.$error.minlength\">Your e-mail is required to be at least 5 characters.</p><p class=\"help-block\" ng-show=\"form.email.$error.maxlength\">Your e-mail cannot be longer than 100 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"password\">New password</label><input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"New password\" ng-model=\"vm.registerAccount.password\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.password.$dirty && form.password.$invalid\"><p class=\"help-block\" ng-show=\"form.password.$error.required\">Your password is required.</p><p class=\"help-block\" ng-show=\"form.password.$error.minlength\">Your password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.password.$error.maxlength\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\"vm.registerAccount.password\"></password-strength-bar></div><div class=\"form-group\"><label class=\"control-label\" for=\"confirmPassword\">New password confirmation</label><input type=\"password\" class=\"form-control\" id=\"confirmPassword\" name=\"confirmPassword\" placeholder=\"Confirm the new password\" ng-model=\"vm.confirmPassword\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\"><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.required\">Your confirmation password is required.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.minlength\">Your confirmation password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.maxlength\">Your confirmation password cannot be longer than 50 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\">Register</button></form><p></p><div class=\"alert alert-warning\">If you want to <a class=\"alert-link\" href=\"\" ng-click=\"vm.login()\">sign in</a>, you can try the default accounts:<br>- Administrator (login=\"admin\" and password=\"admin\")<br>- User (login=\"user\" and password=\"user\").</div></div></div></div>');\n$templateCache.put('app/account/sessions/sessions.html','<div><h2>Active sessions for [<b>{{vm.account.login}}</b>]</h2><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>Session invalidated!</strong></div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><strong>An error has occured!</strong> The session could not be invalidated.</div><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr><th>IP Address</th><th>User agent</th><th>Date</th><th></th></tr></thead><tbody><tr ng-repeat=\"session in vm.sessions\"><td>{{session.ipAddress}}</td><td>{{session.userAgent}}</td><td>{{session.tokenDate | date:\\'longDate\\'}}</td><td><button type=\"submit\" class=\"btn btn-primary\" ng-click=\"vm.invalidate(session.series)\">Invalidate</button></td></tr></tbody></table></div></div>');\n$templateCache.put('app/account/settings/settings.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h2>User settings for [<b>{{vm.settingsAccount.login}}</b>]</h2><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>Settings saved!</strong></div><jhi-alert-error></jhi-alert-error><form name=\"form\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"firstName\">First Name</label><input type=\"text\" class=\"form-control\" id=\"firstName\" name=\"firstName\" placeholder=\"Your first name\" ng-model=\"vm.settingsAccount.firstName\" ng-minlength=\"1\" ng-maxlength=\"50\" required maxlength=\"50\"><div ng-show=\"form.firstName.$dirty && form.firstName.$invalid\"><p class=\"help-block\" ng-show=\"form.firstName.$error.required\">Your first name is required.</p><p class=\"help-block\" ng-show=\"form.firstName.$error.minlength\">Your first name is required to be at least 1 character.</p><p class=\"help-block\" ng-show=\"form.firstName.$error.maxlength\">Your first name cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"lastName\">Last Name</label><input type=\"text\" class=\"form-control\" id=\"lastName\" name=\"lastName\" placeholder=\"Your last name\" ng-model=\"vm.settingsAccount.lastName\" ng-minlength=\"1\" ng-maxlength=\"50\" required maxlength=\"50\"><div ng-show=\"form.lastName.$dirty && form.lastName.$invalid\"><p class=\"help-block\" ng-show=\"form.lastName.$error.required\">Your last name is required.</p><p class=\"help-block\" ng-show=\"form.lastName.$error.minlength\">Your last name is required to be at least 1 character.</p><p class=\"help-block\" ng-show=\"form.lastName.$error.maxlength\">Your last name cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"email\">E-mail</label><input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"Your e-mail\" ng-model=\"vm.settingsAccount.email\" ng-minlength=\"5\" ng-maxlength=\"100\" required maxlength=\"100\"><div ng-show=\"form.email.$dirty && form.email.$invalid\"><p class=\"help-block\" ng-show=\"form.email.$error.required\">Your e-mail is required.</p><p class=\"help-block\" ng-show=\"form.email.$error.email\">Your e-mail is invalid.</p><p class=\"help-block\" ng-show=\"form.email.$error.minlength\">Your e-mail is required to be at least 5 characters.</p><p class=\"help-block\" ng-show=\"form.email.$error.maxlength\">Your e-mail cannot be longer than 100 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\">Save</button></form></div></div></div>');\n$templateCache.put('app/admin/audits/audits.html','<div><h2>Audits</h2><div class=\"row\"><div class=\"col-md-5\"><h4>Filter by date</h4><p class=\"input-group\"><span class=\"input-group-addon\">from</span> <input type=\"date\" class=\"input-sm form-control\" name=\"start\" ng-model=\"vm.fromDate\" ng-change=\"vm.onChangeDate()\" required> <span class=\"input-group-addon\">to</span> <input type=\"date\" class=\"input-sm form-control\" name=\"end\" ng-model=\"vm.toDate\" ng-change=\"vm.onChangeDate()\" required></p></div></div><table class=\"table table-condensed table-striped table-bordered table-responsive\"><thead><tr><th ng-click=\"predicate = \\'timestamp\\'; reverse=!reverse\"><span>Date</span></th><th ng-click=\"predicate = \\'principal\\'; reverse=!reverse\"><span>User</span></th><th ng-click=\"predicate = \\'type\\'; reverse=!reverse\"><span>State</span></th><th ng-click=\"predicate = \\'data.message\\'; reverse=!reverse\"><span>Extra data</span></th></tr></thead><tr ng-repeat=\"audit in vm.audits | filter:filter | orderBy:predicate:reverse\" ng-hide=\"audit.filtered\"><td><span>{{audit.timestamp| date:\\'medium\\'}}</span></td><td><small>{{audit.principal}}</small></td><td>{{audit.type}}</td><td><span ng-show=\"audit.data.message\">{{audit.data.message}}</span> <span ng-show=\"audit.data.remoteAddress\"><span>Remote Address</span> {{audit.data.remoteAddress}}</span></td></tr></table><div class=\"text-center\"><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.loadPage(vm.page)\"></uib-pagination></div></div>');\n$templateCache.put('app/admin/configuration/configuration.html','<div><h2>Configuration</h2><span>Filter (by prefix)</span> <input type=\"text\" ng-model=\"filter\" class=\"form-control\"><label ng-hide=\"filteredConfig.length == 0\">Spring configuration</label><table class=\"table table-condensed table-striped table-bordered table-responsive\" style=\"table-layout:fixed\" ng-hide=\"filteredConfig.length == 0\"><thead><tr><th ng-click=\"predicate = \\'prefix\\'; reverse=!reverse\" class=\"col-sm-4\"><span>Prefix</span></th><th class=\"col-sm-8\">Properties</th></tr></thead><tr ng-repeat=\"entry in filtered = (vm.configuration | filter:filter | orderBy:predicate:reverse)\"><td><span>{{entry.prefix}}</span></td><td><div class=\"row\" ng-repeat=\"(key, value) in entry.properties\"><div class=\"col-md-4\">{{key}}</div><div class=\"col-md-8\"><span class=\"pull-right label label-default break\">{{value}}</span></div></div></td></tr></table><div ng-repeat=\"(key, value) in vm.allConfiguration\"><label ng-hide=\"filtered.length == 0\"><span>{{key}}</span></label><table class=\"table table-condensed table-striped table-bordered table-responsive\" style=\"table-layout:fixed\" ng-hide=\"filtered.length == 0\"><thead><tr><th class=\"col-sm-4\">Property</th><th class=\"col-sm-8\">Value</th></tr></thead><tbody><tr ng-repeat=\"item in filtered = (value | filter:filter)\"><td class=\"break\">{{item.key}}</td><td class=\"break\"><span class=\"pull-right label label-default break\">{{item.val}}</span></td></tr></tbody></table></div></div>');\n$templateCache.put('app/admin/docs/docs.html','<iframe src=\"swagger-ui/index.html\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\" width=\"100%\" height=\"900\" scrolling=\"auto\" target=\"_top\"></iframe>');\n$templateCache.put('app/admin/health/health.html','<div><h2>Health Checks</h2><p><button type=\"button\" class=\"btn btn-primary\" ng-click=\"vm.refresh()\"><span class=\"glyphicon glyphicon-refresh\"></span>&nbsp;<span>Refresh</span></button></p><table id=\"healthCheck\" class=\"table table-striped\"><thead><tr><th class=\"col-md-7\">Service Name</th><th class=\"col-md-2 text-center\">Status</th><th class=\"col-md-2 text-center\">Details</th></tr></thead><tbody><tr ng-repeat=\"health in vm.healthData\"><td><span class=\"text-capitalize\">{{ vm.baseName(health.name) }}</span> {{vm.subSystemName(health.name)}}</td><td class=\"text-center\"><span class=\"label\" ng-class=\"vm.getLabelClass(health.status)\">{{ health.status }}</span></td><td class=\"text-center\"><a class=\"hand\" ng-click=\"vm.showHealth(health)\" ng-show=\"health.details || health.error\"><i class=\"glyphicon glyphicon-eye-open\"></i></a></td></tr></tbody></table></div>');\n$templateCache.put('app/admin/health/health.modal.html','<div class=\"modal-header\"><button aria-label=\"Close\" data-dismiss=\"modal\" class=\"close\" type=\"button\" ng-click=\"vm.cancel()\"><span aria-hidden=\"true\">&times;</span></button><h4 class=\"modal-title\" id=\"showHealthLabel\"><span class=\"text-capitalize\">{{ vm.baseName(vm.currentHealth.name) }}</span> {{vm.subSystemName(vm.currentHealth.name)}}</h4></div><div class=\"modal-body pad\"><div ng-show=\"vm.currentHealth.details\"><h4>Properties</h4><table class=\"table table-striped\"><thead><tr><th class=\"col-md-6 text-left\">Name</th><th class=\"col-md-6 text-left\">Value</th></tr></thead><tbody><tr ng-repeat=\"(k,v) in vm.currentHealth.details\"><td class=\"col-md-6 text-left\">{{k}}</td><td class=\"col-md-6 text-left\">{{v}}</td></tr></tbody></table></div><div ng-show=\"vm.currentHealth.error\"><h4>Error</h4><pre>{{vm.currentHealth.error}}</pre></div></div><div class=\"modal-footer\"><button data-dismiss=\"modal\" class=\"btn btn-default pull-left\" type=\"button\" ng-click=\"vm.cancel()\">Done</button></div>');\n$templateCache.put('app/admin/logs/logs.html','<div class=\"table-responsive\"><h2>Logs</h2><p>There are {{ vm.loggers.length }} loggers.</p><span>Filter</span> <input type=\"text\" ng-model=\"filter\" class=\"form-control\"><table class=\"table table-condensed table-striped table-bordered\"><thead><tr title=\"click to order\"><th ng-click=\"predicate = \\'name\\'; reverse=!reverse\"><span>Name</span></th><th ng-click=\"predicate = \\'level\\'; reverse=!reverse\"><span>Level</span></th></tr></thead><tr ng-repeat=\"logger in vm.loggers | filter:filter | orderBy:predicate:reverse\"><td><small>{{logger.name | characters:140}}</small></td><td><button ng-click=\"vm.changeLevel(logger.name, \\'TRACE\\')\" ng-class=\"(logger.level==\\'TRACE\\') ? \\'btn-danger\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">TRACE</button> <button ng-click=\"vm.changeLevel(logger.name, \\'DEBUG\\')\" ng-class=\"(logger.level==\\'DEBUG\\') ? \\'btn-warning\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">DEBUG</button> <button ng-click=\"vm.changeLevel(logger.name, \\'INFO\\')\" ng-class=\"(logger.level==\\'INFO\\') ? \\'btn-info\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">INFO</button> <button ng-click=\"vm.changeLevel(logger.name, \\'WARN\\')\" ng-class=\"(logger.level==\\'WARN\\') ? \\'btn-success\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">WARN</button> <button ng-click=\"vm.changeLevel(logger.name, \\'ERROR\\')\" ng-class=\"(logger.level==\\'ERROR\\') ? \\'btn-primary\\' : \\'btn-default\\'\" class=\"btn btn-default btn-xs\">ERROR</button></td></tr></table></div>');\n$templateCache.put('app/admin/metrics/metrics.html','<div><h2>Application Metrics</h2><p><button type=\"button\" class=\"btn btn-primary\" ng-click=\"vm.refresh()\"><span class=\"glyphicon glyphicon-refresh\"></span>&nbsp;<span>Refresh</span></button></p><h3>JVM Metrics</h3><div class=\"row\" ng-hide=\"vm.updatingMetrics\"><div class=\"col-md-4\"><b>Memory</b><p><span>Total Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.total.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.total.max\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\"0\" max=\"vm.metrics.gauges[\\'jvm.memory.total.max\\'].value\" value=\"vm.metrics.gauges[\\'jvm.memory.total.used\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.memory.total.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.total.max\\'].value | number:0}}%</span></uib-progressbar><p><span>Heap Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\"0\" max=\"vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value\" value=\"vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value | number:0}}%</span></uib-progressbar><p><span>Non-Heap Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\"0\" max=\"vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value\" value=\"vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value | number:0}}%</span></uib-progressbar></div><div class=\"col-md-4\"><b>Threads</b> (Total: {{vm.metrics.gauges[\\'jvm.threads.count\\'].value}}) <a class=\"hand\" ng-click=\"vm.refreshThreadDumpData()\" data-toggle=\"modal\" data-target=\"#threadDump\"><i class=\"glyphicon glyphicon-eye-open\"></i></a><p><span>Runnable</span> {{vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value}}</p><uib-progressbar min=\"0\" value=\"vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value\" max=\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span>Timed Waiting</span> ({{vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value}})</p><uib-progressbar min=\"0\" value=\"vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value\" max=\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\" class=\"progress-striped active\" type=\"warning\"><span>{{vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span>Waiting</span> ({{vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value}})</p><uib-progressbar min=\"0\" value=\"vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value\" max=\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\" class=\"progress-striped active\" type=\"warning\"><span>{{vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span>Blocked</span> ({{vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value}})</p><uib-progressbar min=\"0\" value=\"vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value\" max=\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar></div><div class=\"col-md-4\"><b>Garbage collections</b><div class=\"row\"><div class=\"col-md-9\">Mark Sweep count</div><div class=\"col-md-3 text-right\">{{vm.metrics.gauges[\\'jvm.garbage.PS-MarkSweep.count\\'].value}}</div></div><div class=\"row\"><div class=\"col-md-9\">Mark Sweep time</div><div class=\"col-md-3 text-right\">{{vm.metrics.gauges[\\'jvm.garbage.PS-MarkSweep.time\\'].value}}ms</div></div><div class=\"row\"><div class=\"col-md-9\">Scavenge count</div><div class=\"col-md-3 text-right\">{{vm.metrics.gauges[\\'jvm.garbage.PS-Scavenge.count\\'].value}}</div></div><div class=\"row\"><div class=\"col-md-9\">Scavenge time</div><div class=\"col-md-3 text-right\">{{vm.metrics.gauges[\\'jvm.garbage.PS-Scavenge.time\\'].value}}ms</div></div></div></div><div class=\"well well-lg\" ng-show=\"vm.updatingMetrics\">Updating...</div><h3>HTTP requests (events per second)</h3><p><span>Active requests</span> <b>{{vm.metrics.counters[\\'com.codahale.metrics.servlet.InstrumentedFilter.activeRequests\\'].count | number:0}}</b> - <span>Total requests</span> <b>{{vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count | number:0}}</b></p><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr><th>Code</th><th>Count</th><th class=\"text-right\">Mean</th><th class=\"text-right\"><span>Average</span> (1 min)</th><th class=\"text-right\"><span>Average</span> (5 min)</th><th class=\"text-right\"><span>Average</span> (15 min)</th></tr></thead><tbody><tr><td>OK</td><td><uib-progressbar min=\"0\" max=\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\" value=\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].count\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].count}}</span></uib-progressbar></td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].mean_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m1_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m5_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m15_rate | number:2}}</td></tr><tr><td>Not Found</td><td><uib-progressbar min=\"0\" max=\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\" value=\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].count\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].count}}</span></uib-progressbar></td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].mean_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m1_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m5_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m15_rate | number:2}}</td></tr><tr><td>Server error</td><td><uib-progressbar min=\"0\" max=\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\" value=\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].count\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].count}}</span></uib-progressbar></td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].mean_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m1_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m5_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m15_rate | number:2}}</td></tr></tbody></table></div><h3>Services statistics (time in millisecond)</h3><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr><th>Service name</th><th class=\"text-right\">Count</th><th class=\"text-right\">Mean</th><th class=\"text-right\">Min</th><th class=\"text-right\">p50</th><th class=\"text-right\">p75</th><th class=\"text-right\">p95</th><th class=\"text-right\">p99</th><th class=\"text-right\">Max</th></tr></thead><tbody><tr ng-repeat=\"(k, v) in vm.servicesStats\"><td>{{k}}</td><td class=\"text-right\">{{v.count}}</td><td class=\"text-right\">{{v.mean * 1000 | number:0}}</td><td class=\"text-right\">{{v.min * 1000 | number:0}}</td><td class=\"text-right\">{{v.p50 * 1000 | number:0}}</td><td class=\"text-right\">{{v.p75 * 1000 | number:0}}</td><td class=\"text-right\">{{v.p95 * 1000 | number:0}}</td><td class=\"text-right\">{{v.p99 * 1000 | number:0}}</td><td class=\"text-right\">{{v.max * 1000 | number:0}}</td></tr></tbody></table></div><h3>Ehcache statistics</h3><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr><th>Cache name</th><th class=\"text-right\">Objects</th><th class=\"text-right\">Hits</th><th class=\"text-right\">Misses</th><th class=\"text-right\">Eviction count</th><th class=\"text-right\">Mean get time (ms)</th></tr></thead><tbody><tr ng-repeat=\"(k, v) in vm.cachesStats\" ng-once><td>{{v.name}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.objects\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.hits\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.misses\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.eviction-count\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.mean-get-time\\'].value | number:2}}</td></tr></tbody></table></div><h3 ng-show=\"vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value > 0\">DataSource statistics (time in millisecond)</h3><div class=\"table-responsive\" ng-show=\"vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value > 0\"><table class=\"table table-striped\"><thead><tr><th><span>Usage</span> ({{vm.metrics.gauges[\\'HikariPool-1.pool.ActiveConnections\\'].value}} / {{vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value}})</th><th class=\"text-right\">Count</th><th class=\"text-right\">Mean</th><th class=\"text-right\">Min</th><th class=\"text-right\">p50</th><th class=\"text-right\">p75</th><th class=\"text-right\">p95</th><th class=\"text-right\">p99</th><th class=\"text-right\">Max</th></tr></thead><tbody><tr><td><div class=\"progress progress-striped\"><uib-progressbar min=\"0\" max=\"vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value\" value=\"vm.metrics.gauges[\\'HikariPool-1.pool.ActiveConnections\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'HikariPool-1.pool.ActiveConnections\\'].value * 100 / vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value | number:0}}%</span></uib-progressbar></div></td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].count}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].mean | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].min | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].p50 | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].p75 | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].p95 | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].p99 | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].max | number:2}}</td></tr></tbody></table></div></div>');\n$templateCache.put('app/admin/metrics/metrics.modal.html','<!-- Modal used to display the threads dump --><div class=\"modal-header\"><button type=\"button\" class=\"close\" ng-click=\"vm.cancel()\">&times;</button><h4 class=\"modal-title\">Threads dump</h4></div><div class=\"modal-body pad\"><span class=\"label label-primary\" ng-click=\"threadDumpFilter = {}\">All&nbsp;<span class=\"badge\">{{vm.threadDumpAll}}</span></span>&nbsp; <span class=\"label label-success\" ng-click=\"threadDumpFilter = {threadState: \\'RUNNABLE\\'}\">Runnable&nbsp;<span class=\"badge\">{{vm.threadDumpRunnable}}</span></span>&nbsp; <span class=\"label label-info\" ng-click=\"threadDumpFilter = {threadState: \\'WAITING\\'}\">Waiting&nbsp;<span class=\"badge\">{{vm.threadDumpWaiting}}</span></span>&nbsp; <span class=\"label label-warning\" ng-click=\"threadDumpFilter = {threadState: \\'TIMED_WAITING\\'}\">Timed Waiting&nbsp;<span class=\"badge\">{{vm.threadDumpTimedWaiting}}</span></span>&nbsp; <span class=\"label label-danger\" ng-click=\"threadDumpFilter = {threadState: \\'BLOCKED\\'}\">Blocked&nbsp;<span class=\"badge\">{{vm.threadDumpBlocked}}</span></span>&nbsp;<div class=\"voffset2\">&nbsp;</div>Filter <input type=\"text\" ng-model=\"threadDumpFilter\" class=\"form-control\"><div class=\"row pad\" ng-repeat=\"(k, v) in vm.threadDump | filter:threadDumpFilter\"><h5><span class=\"label\" ng-class=\"vm.getLabelClass(v.threadState)\">{{v.threadState}}</span>&nbsp;{{v.threadName}} (ID {{v.threadId}}) <a ng-click=\"show = !show\"><span ng-show=\"!show\">Show StackTrace</span> <span ng-show=\"show\">Hide StackTrace</span></a></h5><div class=\"well\" ng-show=\"show\"><div ng-repeat=\"(stK, stV) in v.stackTrace\">{{stV.className}}.{{stV.methodName}}({{stV.fileName}}:{{stV.lineNumber}}) <span class=\"voffset1\"></span></div></div><table class=\"table table-condensed\"><thead><tr><th class=\"text-right\">Blocked Time</th><th class=\"text-right\">Blocked Count</th><th class=\"text-right\">Waited Time</th><th class=\"text-right\">Waited Count</th><th>Lock Name</th></tr></thead><tbody><tr><td>{{v.blockedTime}}</td><td>{{v.blockedCount}}</td><td>{{v.waitedTime}}</td><td>{{v.waitedCount}}</td><td>{{v.lockName}}</td></tr></tbody></table></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default pull-left\" data-dismiss=\"modal\" ng-click=\"vm.cancel()\">Done</button></div>');\n$templateCache.put('app/admin/user-management/user-management-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.user.login)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this User?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/admin/user-management/user-management-detail.html','<div><h2><span>User</span> \"{{vm.user.login}}\"</h2><dl class=\"dl-horizontal\"><dt><span>Login</span></dt><dd><span>{{vm.user.login}}</span></dd><dt><span>First Name</span></dt><dd>{{vm.user.firstName}}</dd><dt><span>Last Name</span></dt><dd>{{vm.user.lastName}}</dd><dt><span>Email</span></dt><dd>{{vm.user.email}}</dd><dt><span>Activated</span></dt><dd>{{vm.user.activated}}</dd><dt><span>Created By</span></dt><dd>{{vm.user.createdBy}}</dd><dt><span>Created Date</span></dt><dd>{{vm.user.createdDate | date:\\'dd/MM/yy HH:mm\\' }}</dd><dt><span>Last Modified By</span></dt><dd>{{vm.user.lastModifiedBy}}</dd><dt><span>Last Modified Date</span></dt><dd>{{vm.user.lastModifiedDate | date:\\'dd/MM/yy HH:mm\\'}}</dd><dt><span>Profiles</span></dt><dd><ul class=\"list-unstyled\"><li ng-repeat=\"authority in vm.user.authorities\"><span>{{authority}}</span></li></ul></dd></dl><button type=\"submit\" ui-sref=\"user-management\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button></div>');\n$templateCache.put('app/admin/user-management/user-management-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myUserLabel\">Create or edit a User</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\"><label>ID</label><input type=\"text\" class=\"form-control\" name=\"id\" ng-model=\"vm.user.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\">Login</label><input type=\"text\" class=\"form-control\" name=\"login\" ng-model=\"vm.user.login\" ng-required=\"vm.user.id == null\" ng-minlength=\"1\" ng-maxlength=\"50\" ng-pattern=\"/^[_\\'.@A-Za-z0-9-]*$/\"><div ng-show=\"editForm.login.$invalid\"><p class=\"help-block\" ng-show=\"editForm.login.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.login.$error.maxlength\">This field cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\">First Name</label><input type=\"text\" class=\"form-control\" name=\"firstName\" ng-model=\"vm.user.firstName\" ng-maxlength=\"50\"><div ng-show=\"editForm.firstName.$invalid\"><p class=\"help-block\" ng-show=\"editForm.firstName.$error.maxlength\">This field cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label>Last Name</label><input type=\"text\" class=\"form-control\" name=\"lastName\" ng-model=\"vm.user.lastName\" ng-maxlength=\"50\"><div ng-show=\"editForm.lastName.$invalid\"><p class=\"help-block\" ng-show=\"editForm.lastName.$error.maxlength\">This field cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\">Email</label><input type=\"email\" class=\"form-control\" name=\"email\" ng-model=\"vm.user.email\" required ng-maxlength=\"100\"><div ng-show=\"editForm.email.$invalid\"><p class=\"help-block\" ng-show=\"editForm.email.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.email.$error.maxlength\">This field cannot be longer than 100 characters.</p><p class=\"help-block\" ng-show=\"editForm.email.$error.email\">Your e-mail is invalid.</p></div></div><div class=\"form-group\"><label for=\"activated\"><input ng-disabled=\"vm.user.id === null\" type=\"checkbox\" id=\"activated\" name=\"activated\" ng-model=\"vm.user.activated\"> <span>Activated</span></label></div><div class=\"form-group\"><label>Profiles</label><select class=\"form-control\" multiple=\"multiple\" name=\"authority\" ng-model=\"vm.user.authorities\" ng-options=\"authority for authority in vm.authorities\"></select></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/admin/user-management/user-management.html','<div><h2>Users</h2><jhi-alert></jhi-alert><div class=\"row\"><div class=\"col-md-4\"><button class=\"btn btn-primary\" ui-sref=\"user-management.new\"><span class=\"glyphicon glyphicon-flash\"></span> <span>Create a new User</span></button></div></div><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span><span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"login\"><span>Login</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"email\"><span>Email</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th><th><span>Profiles</span></th><th jh-sort-by=\"createdDate\"><span>Created Date</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"lastModifiedBy\"><span>Last Modified By</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"lastModifiedDate\"><span>Last Modified Date</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"user in vm.users track by user.id\"><td><a ui-sref=\"user-management-detail({login:user.login})\">{{user.id}}</a></td><td>{{user.login}}</td><td>{{user.email}}</td><td><span class=\"label label-danger\" ng-click=\"vm.setActive(user, true)\" ng-show=\"!user.activated\" style=\"cursor: pointer\">Deactivated</span> <span class=\"label label-success\" ng-click=\"vm.setActive(user, false)\" ng-show=\"user.activated\" style=\"cursor: pointer\">Activated</span></td><td><div ng-repeat=\"authority in user.authorities\"><span class=\"label label-info\">{{ authority }}</span></div></td><td>{{user.createdDate | date:\\'dd/MM/yy HH:mm\\'}}</td><td>{{user.lastModifiedBy}}</td><td>{{user.lastModifiedDate | date:\\'dd/MM/yy HH:mm\\'}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"user-management-detail({login:user.login})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"user-management.edit({login:user.login})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"user-management.delete({login:user.login})\" class=\"btn btn-danger btn-sm\" ng-disabled=\"vm.currentAccount.login==user.login\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div></div>');\n$templateCache.put('app/components/login/login.html','<div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.cancel()\">&times;</button><h4 class=\"modal-title\">Sign in</h4></div><div class=\"modal-body\"><div class=\"row\"><div class=\"col-md-4 col-md-offset-4\"><h1>Sign in</h1></div><div class=\"col-md-8 col-md-offset-2\"><div class=\"alert alert-danger\" ng-show=\"vm.authenticationError\"><strong>Failed to sign in!</strong> Please check your credentials and try again.</div></div><div class=\"col-md-8 col-md-offset-2\"><form class=\"form\" role=\"form\" ng-submit=\"vm.login($event)\"><div class=\"form-group\"><label for=\"username\">Login</label><input type=\"text\" class=\"form-control\" id=\"username\" placeholder=\"Your username\" ng-model=\"vm.username\"></div><div class=\"form-group\"><label for=\"password\">Password</label><input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"Your password\" ng-model=\"vm.password\"></div><div class=\"form-group\"><label for=\"rememberMe\"><input type=\"checkbox\" id=\"rememberMe\" ng-model=\"vm.rememberMe\" checked=\"checked\"> <span>Remember me</span></label></div><button type=\"submit\" class=\"btn btn-primary\">Sign in</button></form><p></p><div class=\"alert alert-warning\"><a class=\"alert-link\" href=\"\" ng-click=\"vm.requestResetPassword()\">Did you forget your password?</a></div><div class=\"alert alert-warning\">You don\\'t have an account yet? <a class=\"alert-link\" href=\"\" ng-click=\"vm.register()\">Register a new account</a></div></div></div></div>');\n$templateCache.put('app/entities/equipment-set/equipment-set-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.equipmentSet.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Equipment Set?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/equipment-set/equipment-set-detail.html','<div><h2><span>Equipment Set</span> {{vm.equipmentSet.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Name</span></dt><dd><span>{{vm.equipmentSet.name}}</span></dd><dt><span>Pad Set</span></dt><dd><a ui-sref=\"pad-set-detail({id:vm.equipmentSet.padSet.id})\">{{vm.equipmentSet.padSet.name}}</a></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"equipment-set-detail.edit({id:vm.equipmentSet.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\">Edit</span></button></div>');\n$templateCache.put('app/entities/equipment-set/equipment-set-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myEquipmentSetLabel\">Create or edit a Equipment Set</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.equipmentSet.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.equipmentSet.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_name\">Name</label><input type=\"text\" class=\"form-control\" name=\"name\" id=\"field_name\" ng-model=\"vm.equipmentSet.name\" required><div ng-show=\"editForm.name.$invalid\"><p class=\"help-block\" ng-show=\"editForm.name.$error.required\">This field is required.</p></div></div><div class=\"form-group\"><label for=\"field_padSet\">Pad Set</label><select class=\"form-control\" id=\"field_padSet\" name=\"padSet\" ng-model=\"vm.equipmentSet.padSet\" ng-options=\"padSet as padSet.name for padSet in vm.padsets track by padSet.id\"><option value=\"\"></option></select></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/equipment-set/equipment-sets.html','<div><h2>Equipment Sets</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"equipment-set.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span class=\"hidden-xs\">Create new Equipment Set</span></button></div><div class=\"col-xs-8 no-padding-right\"><form name=\"searchForm\" class=\"form-inline\"><div class=\"input-group pull-right\"><input type=\"text\" class=\"form-control\" ng-model=\"vm.searchQuery\" id=\"searchQuery\" placeholder=\"Query\"> <span class=\"input-group-btn width-min\"><button class=\"btn btn-info\" ng-click=\"vm.search(vm.searchQuery)\"><span class=\"glyphicon glyphicon-search\"></span></button> </span><span class=\"input-group-btn width-min\" ng-if=\"vm.currentSearch\"><button class=\"btn btn-info\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-trash\"></span></button></span></div></form></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr><th><span>ID</span></th><th><span>Name</span></th><th><span>Pad Set</span></th><th></th></tr></thead><tbody><tr ng-repeat=\"equipmentSet in vm.equipmentSets track by equipmentSet.id\"><td><a ui-sref=\"equipment-set-detail({id:equipmentSet.id})\">{{equipmentSet.id}}</a></td><td>{{equipmentSet.name}}</td><td><a ui-sref=\"pad-set-detail({id:equipmentSet.padSet.id})\">{{equipmentSet.padSet.name}}</a></td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"equipment-set-detail({id:equipmentSet.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"equipment-set.edit({id:equipmentSet.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"equipment-set.delete({id:equipmentSet.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\"></span></button></div></td></tr></tbody></table></div></div>');\n$templateCache.put('app/entities/metric/metric-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.metric.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Metric?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/metric/metric-detail.html','<div><h2><span>Metric</span> {{vm.metric.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Name</span></dt><dd><span>{{vm.metric.name}}</span></dd><dt><span>Value</span></dt><dd><span>{{vm.metric.value}}</span></dd><dt><span>Equipment Set</span></dt><dd><a ui-sref=\"equipment-set-detail({id:vm.metric.equipmentSet.id})\">{{vm.metric.equipmentSet.id}}</a></dd><dt><span>Threshold</span></dt><dd><a ui-sref=\"threshold-detail({id:vm.metric.threshold.id})\">{{vm.metric.threshold.id}}</a></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"metric-detail.edit({id:vm.metric.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\">Edit</span></button></div>');\n$templateCache.put('app/entities/metric/metric-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myMetricLabel\">Create or edit a Metric</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.metric.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.metric.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_name\">Name</label><input type=\"text\" class=\"form-control\" name=\"name\" id=\"field_name\" ng-model=\"vm.metric.name\" required><div ng-show=\"editForm.name.$invalid\"><p class=\"help-block\" ng-show=\"editForm.name.$error.required\">This field is required.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_value\">Value</label><input type=\"number\" class=\"form-control\" name=\"value\" id=\"field_value\" ng-model=\"vm.metric.value\" required><div ng-show=\"editForm.value.$invalid\"><p class=\"help-block\" ng-show=\"editForm.value.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.value.$error.number\">This field should be a number.</p></div></div><div class=\"form-group\"><label for=\"field_equipmentSet\">Equipment Set</label><select class=\"form-control\" id=\"field_equipmentSet\" name=\"equipmentSet\" ng-model=\"vm.metric.equipmentSet\" ng-options=\"equipmentSet as equipmentSet.id for equipmentSet in vm.equipmentsets track by equipmentSet.id\"><option value=\"\"></option></select></div><div class=\"form-group\"><label for=\"field_threshold\">Threshold</label><select class=\"form-control\" id=\"field_threshold\" name=\"threshold\" ng-model=\"vm.metric.threshold\" ng-options=\"threshold as threshold.id for threshold in vm.thresholds | orderBy:\\'id\\' track by threshold.id\"><option value=\"\"></option></select></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/metric/metrics.html','<div><h2>Metrics</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"metric.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span class=\"hidden-xs\">Create new Metric</span></button></div><div class=\"col-xs-8 no-padding-right\"><form name=\"searchForm\" class=\"form-inline\"><div class=\"input-group pull-right\"><input type=\"text\" class=\"form-control\" ng-model=\"vm.searchQuery\" id=\"searchQuery\" placeholder=\"Query\"> <span class=\"input-group-btn width-min\"><button class=\"btn btn-info\" ng-click=\"vm.search(vm.searchQuery)\"><span class=\"glyphicon glyphicon-search\"></span></button> </span><span class=\"input-group-btn width-min\" ng-if=\"vm.currentSearch\"><button class=\"btn btn-info\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-trash\"></span></button></span></div></form></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr><th><span>ID</span></th><th><span>Name</span></th><th><span>Value</span></th><th><span>Equipment Set</span></th><th><span>Threshold</span></th><th></th></tr></thead><tbody><tr ng-repeat=\"metric in vm.metrics track by metric.id\"><td><a ui-sref=\"metric-detail({id:metric.id})\">{{metric.id}}</a></td><td>{{metric.name}}</td><td>{{metric.value}}</td><td><a ui-sref=\"equipment-set-detail({id:metric.equipmentSet.id})\">{{metric.equipmentSet.id}}</a></td><td><a ui-sref=\"threshold-detail({id:metric.threshold.id})\">{{metric.threshold.id}}</a></td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"metric-detail({id:metric.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"metric.edit({id:metric.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"metric.delete({id:metric.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\"></span></button></div></td></tr></tbody></table></div></div>');\n$templateCache.put('app/entities/pad-set/pad-set-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.padSet.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Pad Set?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/pad-set/pad-set-detail.html','<div><h2><span>Pad Set</span> {{vm.padSet.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Name</span></dt><dd><span>{{vm.padSet.name}}</span></dd><dt><span>Latitude</span></dt><dd><span>{{vm.padSet.latitude}}</span></dd><dt><span>Longitude</span></dt><dd><span>{{vm.padSet.longitude}}</span></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"pad-set-detail.edit({id:vm.padSet.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\">Edit</span></button></div>');\n$templateCache.put('app/entities/pad-set/pad-set-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myPadSetLabel\">Create or edit a Pad Set</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.padSet.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.padSet.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_name\">Name</label><input type=\"text\" class=\"form-control\" name=\"name\" id=\"field_name\" ng-model=\"vm.padSet.name\" required><div ng-show=\"editForm.name.$invalid\"><p class=\"help-block\" ng-show=\"editForm.name.$error.required\">This field is required.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_latitude\">Latitude</label><input type=\"number\" class=\"form-control\" name=\"latitude\" id=\"field_latitude\" ng-model=\"vm.padSet.latitude\" required><div ng-show=\"editForm.latitude.$invalid\"><p class=\"help-block\" ng-show=\"editForm.latitude.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.latitude.$error.number\">This field should be a number.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_longitude\">Longitude</label><input type=\"number\" class=\"form-control\" name=\"longitude\" id=\"field_longitude\" ng-model=\"vm.padSet.longitude\" required><div ng-show=\"editForm.longitude.$invalid\"><p class=\"help-block\" ng-show=\"editForm.longitude.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.longitude.$error.number\">This field should be a number.</p></div></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/pad-set/pad-sets.html','<div><h2>Pad Sets</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"pad-set.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span class=\"hidden-xs\">Create new Pad Set</span></button></div><div class=\"col-xs-8 no-padding-right\"><form name=\"searchForm\" class=\"form-inline\"><div class=\"input-group pull-right\"><input type=\"text\" class=\"form-control\" ng-model=\"vm.searchQuery\" id=\"searchQuery\" placeholder=\"Query\"> <span class=\"input-group-btn width-min\"><button class=\"btn btn-info\" ng-click=\"vm.search(vm.searchQuery)\"><span class=\"glyphicon glyphicon-search\"></span></button> </span><span class=\"input-group-btn width-min\" ng-if=\"vm.currentSearch\"><button class=\"btn btn-info\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-trash\"></span></button></span></div></form></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr><th><span>ID</span></th><th><span>Name</span></th><th><span>Latitude</span></th><th><span>Longitude</span></th><th></th></tr></thead><tbody><tr ng-repeat=\"padSet in vm.padSets track by padSet.id\"><td><a ui-sref=\"pad-set-detail({id:padSet.id})\">{{padSet.id}}</a></td><td>{{padSet.name}}</td><td>{{padSet.latitude}}</td><td>{{padSet.longitude}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"pad-set-detail({id:padSet.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"pad-set.edit({id:padSet.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"pad-set.delete({id:padSet.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\"></span></button></div></td></tr></tbody></table></div></div>');\n$templateCache.put('app/entities/threshold/threshold-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.threshold.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Threshold?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/threshold/threshold-detail.html','<div><h2><span>Threshold</span> {{vm.threshold.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"dl-horizontal jh-entity-details\"><dt><span>Value</span></dt><dd><span>{{vm.threshold.value}}</span></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"threshold-detail.edit({id:vm.threshold.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\">Edit</span></button></div>');\n$templateCache.put('app/entities/threshold/threshold-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myThresholdLabel\">Create or edit a Threshold</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.threshold.id\"><label for=\"id\">ID</label><input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.threshold.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_value\">Value</label><input type=\"number\" class=\"form-control\" name=\"value\" id=\"field_value\" ng-model=\"vm.threshold.value\" required><div ng-show=\"editForm.value.$invalid\"><p class=\"help-block\" ng-show=\"editForm.value.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.value.$error.number\">This field should be a number.</p></div></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/threshold/thresholds.html','<div><h2>Thresholds</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"threshold.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span class=\"hidden-xs\">Create new Threshold</span></button></div><div class=\"col-xs-8 no-padding-right\"><form name=\"searchForm\" class=\"form-inline\"><div class=\"input-group pull-right\"><input type=\"text\" class=\"form-control\" ng-model=\"vm.searchQuery\" id=\"searchQuery\" placeholder=\"Query\"> <span class=\"input-group-btn width-min\"><button class=\"btn btn-info\" ng-click=\"vm.search(vm.searchQuery)\"><span class=\"glyphicon glyphicon-search\"></span></button> </span><span class=\"input-group-btn width-min\" ng-if=\"vm.currentSearch\"><button class=\"btn btn-info\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-trash\"></span></button></span></div></form></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr><th><span>ID</span></th><th><span>Value</span></th><th></th></tr></thead><tbody><tr ng-repeat=\"threshold in vm.thresholds track by threshold.id\"><td><a ui-sref=\"threshold-detail({id:threshold.id})\">{{threshold.id}}</a></td><td>{{threshold.value}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"threshold-detail({id:threshold.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"threshold.edit({id:threshold.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"threshold.delete({id:threshold.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\"></span></button></div></td></tr></tbody></table></div></div>');\n$templateCache.put('app/layouts/error/accessdenied.html','<div ng-cloak><div class=\"row\"><div class=\"col-md-4\"><span class=\"hipster img-responsive img-rounded\"></span></div><div class=\"col-md-8\"><h1>Error Page!</h1><div class=\"alert alert-danger\">You are not authorized to access the page.</div></div></div></div>');\n$templateCache.put('app/layouts/error/error.html','<div ng-cloak><div class=\"row\"><div class=\"col-md-4\"><span class=\"hipster img-responsive img-rounded\"></span></div><div class=\"col-md-8\"><h1>Error Page!</h1><div ng-show=\"errorMessage\"><div class=\"alert alert-danger\">{{errorMessage}}</div></div></div></div></div>');\n$templateCache.put('app/layouts/navbar/navbar.html','<nav class=\"navbar navbar-default\" role=\"navigation\"><div class=\"container\"><div class=\"navbar-header\"><button type=\"button\" class=\"navbar-toggle\" ng-click=\"vm.toggleNavbar()\"><span class=\"sr-only\">Toggle navigation</span> <span class=\"icon-bar\"></span> <span class=\"icon-bar\"></span> <span class=\"icon-bar\"></span></button> <a class=\"navbar-brand logo\" href=\"#/\" ng-click=\"vm.collapseNavbar()\"><img class=\"logo-img\" src=\"content/images/logo-jhipster.png\"> <span>Team7</span> <span class=\"navbar-version\">v{{VERSION}}</span></a></div><div class=\"navbar-collapse\" uib-collapse=\"vm.isNavbarCollapsed\" ng-switch=\"vm.isAuthenticated()\"><ul class=\"nav navbar-nav navbar-right\"><li ui-sref-active=\"active\"><a ui-sref=\"home\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-home\"></span> <span class=\"hidden-sm\">Home</span></a></li><!-- jhipster-needle-add-element-to-menu - JHipster will add new menu items here --><li ng-class=\"{active: vm.$state.includes(\\'entity\\')}\" ng-switch-when=\"true\" uib-dropdown class=\"dropdown pointer\"><a class=\"dropdown-toggle\" uib-dropdown-toggle href=\"\" id=\"entity-menu\"><span><span class=\"glyphicon glyphicon-th-list\"></span> <span class=\"hidden-sm\">Entities </span><b class=\"caret\"></b></span></a><ul class=\"dropdown-menu\" uib-dropdown-menu><li ui-sref-active=\"active\"><a ui-sref=\"equipment-set\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Equipment Set</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"metric\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Metric</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"threshold\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Threshold</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"pad-set\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-asterisk\"></span>&nbsp; <span>Pad Set</span></a></li><!-- jhipster-needle-add-entity-to-menu - JHipster will add entities to the menu here --></ul></li><li ng-class=\"{active: vm.$state.includes(\\'account\\')}\" uib-dropdown class=\"dropdown pointer\"><a class=\"dropdown-toggle\" uib-dropdown-toggle href=\"\" id=\"account-menu\"><span><span class=\"glyphicon glyphicon-user\"></span> <span class=\"hidden-sm\">Account </span><b class=\"caret\"></b></span></a><ul class=\"dropdown-menu\" uib-dropdown-menu><li ui-sref-active=\"active\" ng-switch-when=\"true\"><a ui-sref=\"settings\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-wrench\"></span>&nbsp; <span>Settings</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"true\"><a ui-sref=\"password\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-lock\"></span>&nbsp; <span>Password</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"true\"><a ui-sref=\"sessions\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-cloud\"></span>&nbsp; <span>Sessions</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"true\"><a href=\"\" ng-click=\"vm.logout()\" id=\"logout\"><span class=\"glyphicon glyphicon-log-out\"></span>&nbsp; <span>Sign out</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"false\"><a href=\"\" ng-click=\"vm.login()\" id=\"login\"><span class=\"glyphicon glyphicon-log-in\"></span>&nbsp; <span>Sign in</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"false\"><a ui-sref=\"register\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-plus-sign\"></span>&nbsp; <span>Register</span></a></li></ul></li><li ng-class=\"{active: vm.$state.includes(\\'admin\\')}\" ng-switch-when=\"true\" has-authority=\"ROLE_ADMIN\" uib-dropdown class=\"dropdown pointer\"><a class=\"dropdown-toggle\" uib-dropdown-toggle href=\"\" id=\"admin-menu\"><span><span class=\"glyphicon glyphicon-tower\"></span> <span class=\"hidden-sm\">Administration</span> <b class=\"caret\"></b></span></a><ul class=\"dropdown-menu\" uib-dropdown-menu><li ui-sref-active=\"active\"><a ui-sref=\"user-management\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-user\"></span>&nbsp; <span>User management</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"jhi-metrics\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-dashboard\"></span>&nbsp; <span>Metrics</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"jhi-health\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-heart\"></span>&nbsp; <span>Health</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"jhi-configuration\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-list-alt\"></span>&nbsp; <span>Configuration</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"audits\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-bell\"></span>&nbsp; <span>Audits</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"logs\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-tasks\"></span>&nbsp; <span>Logs</span></a></li><li ng-show=\"vm.swaggerEnabled\" ui-sref-active=\"active\"><a ui-sref=\"docs\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-book\"></span>&nbsp; <span>API</span></a></li><!-- jhipster-needle-add-element-to-admin-menu - JHipster will add entities to the admin menu here --><li ng-hide=\"vm.inProduction\"><a href=\"/h2-console\" target=\"_tab\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-hdd\"></span>&nbsp; <span>Database</span></a></li></ul></li></ul></div></div></nav>');\n$templateCache.put('app/account/reset/finish/reset.finish.html','<div><div class=\"row\"><div class=\"col-md-4 col-md-offset-4\"><h1>Reset password</h1><div class=\"alert alert-danger\" ng-show=\"vm.keyMissing\"><strong>The password reset key is missing.</strong></div><div class=\"alert alert-warning\" ng-hide=\"vm.success || vm.keyMissing\"><p>Choose a new password</p></div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><p>Your password couldn\\'t be reset. Remember a password request is only valid for 24 hours.</p></div><div class=\"alert alert-success\" ng-show=\"vm.success\"><p><strong>Your password has been reset.</strong> Please <a class=\"alert-link\" href=\"\" ng-click=\"vm.login()\">sign in</a>.</p></div><div class=\"alert alert-danger\" ng-show=\"vm.doNotMatch\">The password and its confirmation do not match!</div><div ng-hide=\"vm.keyMissing\"><form ng-show=\"!vm.success\" name=\"form\" role=\"form\" novalidate ng-submit=\"vm.finishReset()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"password\">New password</label><input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"New password\" ng-model=\"vm.resetAccount.password\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.password.$dirty && form.password.$invalid\"><p class=\"help-block\" ng-show=\"form.password.$error.required\">Your password is required.</p><p class=\"help-block\" ng-show=\"form.password.$error.minlength\">Your password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.password.$error.maxlength\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\"vm.resetAccount.password\"></password-strength-bar></div><div class=\"form-group\"><label class=\"control-label\" for=\"confirmPassword\">New password confirmation</label><input type=\"password\" class=\"form-control\" id=\"confirmPassword\" name=\"confirmPassword\" placeholder=\"Confirm the new password\" ng-model=\"vm.confirmPassword\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\"><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.required\">Your password confirmation is required.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.minlength\">Your password confirmation is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.maxlength\">Your password confirmation cannot be longer than 50 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\">Reset Password</button></form></div></div></div></div>');\n$templateCache.put('app/account/reset/request/reset.request.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h1>Reset your password</h1><div class=\"alert alert-danger\" ng-show=\"vm.errorEmailNotExists\"><strong>E-Mail address isn\\'t registered!</strong> Please check and try again.</div><div class=\"alert alert-warning\" ng-hide=\"vm.success\"><p>Enter the e-mail address you used to register.</p></div><div class=\"alert alert-success\" ng-show=\"vm.success == \\'OK\\'\"><p>Check your e-mails for details on how to reset your password.</p></div><form ng-show=\"!vm.success\" name=\"form\" role=\"form\" novalidate ng-submit=\"vm.requestReset()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"email\">E-mail</label><input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"Your e-mail\" ng-model=\"vm.resetAccount.email\" ng-minlength=\"5\" ng-maxlength=\"100\" required><div ng-show=\"form.email.$dirty && form.email.$invalid\"><p class=\"help-block\" ng-show=\"form.email.$error.required\">Your e-mail is required.</p><p class=\"help-block\" ng-show=\"form.email.$error.email\">Your e-mail is invalid.</p><p class=\"help-block\" ng-show=\"form.email.$error.minlength\">Your e-mail is required to be at least 5 characters.</p><p class=\"help-block\" ng-show=\"form.email.$error.maxlength\">Your e-mail cannot be longer than 100 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\">Reset</button></form></div></div></div>');}]);})();"],"sourceRoot":"/source/"}